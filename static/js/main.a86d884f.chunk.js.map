{"version":3,"sources":["service/time.js","service/service.js","context/context.js","table.js","DriverTable.js","Modal.js","dropdown.js","dotyTable.js","LiveTiming.js","serviceWorker.js","index.js","context/reducer.js"],"names":["Time","clazz","name","time","number","rawTimes","car","fastestIndex","this","parseTime","parseFloat","isNaN","axios","require","getDOTY","url","dispatch","a","get","res","parser","DOMParser","doc","parseFromString","data","contents","startSkipping","querySelectorAll","forEach","tr","trs","Array","prototype","slice","call","innerText","points","map","point","filter","length","lowTime","sort","b","totalTimes","getTiming","currentClass","maxNumberOfRuns","conesHit","numberOfRun","querySelector","times","actualTimes","fastest","timeHtml","index","split","s","trim","push","raw","cones","bestTime","type","runCount","maxRuns","StateContext","createContext","StateProvider","initialState","children","reducer","Provider","value","useReducer","useStateValue","useContext","useStyles","makeStyles","table","minWidth","height","AutoXTable","props","rows","row","createData","topPaxtime","classes","position","Fragment","TableContainer","component","Paper","Table","className","aria-label","TableHead","TableRow","style","background","TableCell","width","color","align","fill","em","TableBody","onClick","scope","cursor","toUpperCase","toFixed","backgroundColor","maxWidth","DriverTable","selected","overflow","marginLeft","tableLayout","getModalStyle","top","left","transform","theme","paper","palette","border","boxShadow","shadows","padding","spacing","DriverModal","React","useState","modalStyle","Modal","aria-labelledby","aria-describedby","open","onClose","formControl","margin","selectEmpty","marginTop","Dropdown","clazzes","dropdown","FormControl","InputLabel","Select","onChange","window","history","pushState","location","pathname","target","cl","MenuItem","DotyTable","sum","lowest","currentEventScore","currentTime","href","driver","above","topPax","paxMap","diff","pointsNeeded","getNeedsToMoveUp","ss","fsp","as","bs","cs","ds","es","fs","gs","hs","hcs","ssr","ev","ssp","asp","bsp","csp","dsp","esp","fsf","sts","stx","str","stu","sth","ssc","smf","sm","ssm","xp","bp","cp","dp","ep","fp","hcr","am","bm","cm","dm","fm","fsae","km","ja","jb","jc","camc","camt","cams","getRaw","results","Object","keys","concat","runTime","substring","noviceTimes","getPax","applyPax","LiveTiming","setData","setClasses","setTopPax","dotyData","setDoty","showDoty","setShowDoty","getData","promise","checkurl","search","includes","val","replace","calculateDOTY","dotyRes","pax","currentPointsForEvent","pop","accumulator","currentValue","po","reduce","arr","useEffect","Date","getTime","dotyResults","classList","fetchData","onpopstate","e","float","paddingRight","paddingTop","class","Boolean","hostname","match","ReactDOM","render","StrictMode","state","action","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oPAAaA,EAAb,WASI,WAAYC,EAAOC,EAAMC,EAAMC,EAAQC,EAAUC,EAAKC,GAAc,oBAChEC,KAAKP,MAAQA,EACbO,KAAKN,KAAOA,EACZM,KAAKL,KAAOK,KAAKC,UAAUN,GAC3BK,KAAKJ,OAASA,EACdI,KAAKH,SAAWA,EAChBG,KAAKF,IAAMA,EACXE,KAAKD,aAAeA,EAhB5B,sDACcJ,GAEN,OADAA,EAAOO,WAAWP,EAAK,IACnBQ,MAAMR,GACC,IAEAA,MANnB,KCEMS,EAAQC,EAAQ,IAETC,EAAO,uCAAG,WAAOC,EAAKC,GAAZ,uBAAAC,EAAA,sEACHL,EAAMM,IAAIH,GADP,cACfI,EADe,OAEfC,EAAS,IAAIC,UACbC,EAAMF,EAAOG,gBAAgBJ,EAAIK,KAAKC,SAAU,aAChDD,EAAO,GACPE,GAAgB,EACpBJ,EAAIK,iBAAiB,0CAA0CC,SAAQ,SAAAC,GACnE,IAAIH,EAAJ,CACA,IAAII,EAAMD,EAAGF,iBAAiB,MAE1BzB,GADJ4B,EAAMC,MAAMC,UAAUC,MAAMC,KAAKJ,IAClB,GAAGK,UAGdC,GAFJN,EAAMA,EAAIG,MAAM,IAECI,KAAI,SAAAC,GAAK,OAAG5B,WAAW4B,EAAMH,cAI9C,GAHAC,EAASA,EAAOG,QAAO,SAAAtB,GAAC,OAAGN,MAAMM,QACjCS,EAAgBU,EAAOI,OAAS,GAEhC,CAKA,IAAIC,EAAU,GAFdL,GADAA,EAASA,EAAOM,MAAK,SAACzB,EAAE0B,GAAH,OAAQA,EAAE1B,MACfgB,MAAM,EAAE,IAGbO,OAAS,IAChBC,EAAUL,EAAO,IAErBZ,EAAKtB,GAAQ,CAACA,KAAKA,EAAMuC,QAASA,EAASG,WAAYR,EAAOI,OAAQJ,OAAOA,QA1B9D,kBA8BZZ,GA9BY,2CAAH,wDAiCPqB,EAAS,uCAAG,WAAO9B,EAAKC,GAAZ,6BAAAC,EAAA,sEACLL,EAAMM,IAAIH,GADL,cACjBI,EADiB,OAGjBC,EAAS,IAAIC,UACbC,EAAMF,EAAOG,gBAAgBJ,EAAIK,KAAKC,SAAU,aAChDD,EAAO,GACPsB,EAAe,GACfC,EAAkB,EAClBC,EAAW,EACXC,EAAc,EAClB3B,EAAIK,iBAAiB,8CAA8CC,SAAQ,SAAAC,GACvE,GAAIA,EAAGqB,cAAc,MACjBJ,EAAejB,EAAGqB,cAAc,KAAKhD,KACrCsB,EAAKsB,GAAgB,OAClB,CACH,IAAI7C,EAAQ4B,EAAGqB,cAAc,mBAAmBf,UAC5C/B,EAASyB,EAAGqB,cAAc,mBAAmBf,UAC7CjC,EAAO2B,EAAGqB,cAAc,mBAAmBf,UAC3C7B,EAAMuB,EAAGqB,cAAc,mBAAmBf,UAC1CgB,EAAQpB,MAAMC,UAAUC,MAAMC,KAAKL,EAAGF,iBAAiB,sBAE3DwB,EAAQA,EAAMlB,MAAM,EAAEkB,EAAMX,OAAO,GAEnC,IAAIY,EAAc,GACd/C,EAAW,GACXgD,EAAU,IACV9C,GAAgB,EACpB4C,EAAMvB,SAAQ,SAAC0B,EAASC,GACpB,IAAIpD,EAAOmD,EAASnB,UAAUqB,MAAM,KAAKnB,KAAI,SAAAoB,GAAC,OAAEA,EAAEC,UAElD,GADArD,EAASsD,KAAKL,EAASnB,UAAUuB,QACb,IAAhBvD,EAAKqC,OAAa,CAClB,GAAgB,KAAZrC,EAAK,GACL,OAEJ,IAAIyD,EAAMlD,WAAWP,EAAK,IAC1BiD,EAAYO,KAAKC,GACjBX,IACIW,EAAMP,IACNA,EAAUO,EACVrD,EAAegD,QAEhB,GAAoB,IAAhBpD,EAAKqC,OAAc,CAC1B,GAAgB,QAAZrC,EAAK,IAA4B,QAAZA,EAAK,GAE1B,YADAiD,EAAYO,KAAK,KAGrB,IAAIE,EAAQnD,WAAWP,EAAK,GAAG,IAC3BQ,MAAMkD,KAAQA,EAAQ,GAC1B,IAAID,EAAMlD,WAAWP,EAAK,IAAc,EAAR0D,EAChCb,GAAWa,EACXZ,IACAG,EAAYO,KAAKC,GACbA,EAAMP,IACNA,EAAUO,EACVrD,EAAegD,OAI3B,IAAIO,EAAWV,EAAYV,MAAK,SAACzB,EAAE0B,GAAH,OAAO1B,EAAE0B,KAAG,GAC5CnB,EAAKsB,GAAca,KAAK,IAAI3D,EAAKC,EAAMC,EAAK4D,EAAU1D,EAAQC,EAAUC,EAAKC,IACzEF,EAASmC,OAASO,IAClBA,EAAkB1C,EAASmC,YAKvCxB,EAAS,CAAC+C,KAAK,iBAAkBvC,KAAK,CAACwB,SAASA,EAAUgB,SAAUf,EAAagB,QAASlB,KAlErE,kBAqEdvB,GArEc,4CAAH,wD,wECpCT0C,EAAeC,0BAGfC,EAAgB,SAAC,GAAD,IAAEC,EAAF,EAAEA,aAAcC,EAAhB,EAAgBA,SAAUC,EAA1B,EAA0BA,QAA1B,OAC3B,kBAACL,EAAaM,SAAd,CAAuBC,MAAOC,qBAAWH,EAASF,IAC/CC,IAGQK,EAAgB,kBAAMC,qBAAWV,ICExCW,EAAYC,YAAW,CACzBC,MAAO,CACLC,SAAU,KAEZC,OAAQ,SAOL,SAASC,EAAWC,GAAQ,IAEzB3D,EAAe2D,EAAf3D,KAAMtB,EAASiF,EAATjF,KAFkB,EAGAyE,IAHA,mBAGtBV,EAHsB,KAGtBA,QAAUjD,EAHY,KAK1BoE,EAAO5D,EAAKa,KAAI,SAAAgD,GAChB,OAVR,SAAoBnF,EAAME,EAAQD,EAAMF,EAAOI,EAAUC,EAAKC,GAC5D,MAAO,CAAEL,OAAME,SAAQD,OAAMF,QAAOI,WAAUC,MAAKC,gBAStC+E,CAAWD,EAAInF,KAAMmF,EAAIjF,OAAQiF,EAAIlF,KAAMkF,EAAIpF,MAAOoF,EAAIhF,SAAUgF,EAAI/E,IAAK+E,EAAI9E,iBAGxFgF,EAAa,MAEbH,GAAQA,EAAK5C,OAAS,GAAc,QAATtC,GAEpBkF,GAAiB,QAATlF,KADfqF,EAAaH,EAAK,GAAGjF,MAIzB,IAAMqF,EAAUX,IACZY,EAAW,EACf,OACI,kBAAC,IAAMC,SAAP,KACI,kBAACC,EAAA,EAAD,CAAgBC,UAAWC,KACvB,6BACI,kBAACC,EAAA,EAAD,CAAOC,UAAWP,EAAQT,MAAOiB,aAAW,gBACxC,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAUC,MAAO,CAAEC,WAAa,SAC5B,kBAACC,EAAA,EAAD,CAAWF,MAAO,CAAEG,MAAO,GAAIC,MAAM,SAAWC,MAAM,QAAtD,YACA,kBAACH,EAAA,EAAD,CAAWF,MAAO,CAAEI,MAAQ,UAA5B,QACA,kBAACF,EAAA,EAAD,CAAWF,MAAO,CAAEI,MAAQ,SAAUC,MAAM,QAA5C,UACA,kBAACH,EAAA,EAAD,CAAWF,MAAO,CAAEI,MAAQ,SAAUC,MAAM,QAA5C,QACA,kBAACH,EAAA,EAAD,CAAWF,MAAO,CAAEI,MAAQ,SAAUC,MAAM,QAA5C,QAEG,IAAIzE,MAAMkC,GAAUwC,OAAOpE,KAAK,SAACqE,EAAInD,GACpC,OAAO,kBAAC8C,EAAA,EAAD,CAAWF,MAAO,CAAEI,MAAQ,SAAUC,MAAM,QAAQjD,EAAM,MAEpEgC,GAAc,kBAACc,EAAA,EAAD,CAAWF,MAAO,CAAEI,MAAQ,SAAUC,MAAM,QAA5C,iBAGvB,kBAACG,EAAA,EAAD,KACKvB,EAAK/C,KAAI,SAACgD,EAAI9B,GAEX,OADAkC,IAEA,kBAACS,EAAA,EAAD,CAAUC,MAAS5C,EAAQ,EAAI,CAAE6C,WAAa,WAAa,IACvD,kBAACC,EAAA,EAAD,CAAWG,MAAM,QAAQf,GACzB,kBAACY,EAAA,EAAD,CAAWO,QAAS,kBAAI5F,EAAS,CAAC+C,KAAM,kBAAmBvC,KAAM6D,KAAOO,UAAU,KAAKiB,MAAM,OACzF,yBAAKV,MAAO,CAACI,MAAM,OAAQO,OAAQ,YAAazB,EAAInF,OAExD,kBAACmG,EAAA,EAAD,CAAWG,MAAM,QAAQnB,EAAIjF,OAAS,IAAMiF,EAAIpF,MAAM8G,eACtD,kBAACV,EAAA,EAAD,CAAWG,MAAM,QAAQnB,EAAIlF,MAC7B,kBAACkG,EAAA,EAAD,KAAYhB,GAAOA,EAAI9E,cAAgB8E,EAAIhF,UAC7B,IAAVkD,IAAgB6B,EAAK7B,EAAM,GAAK,GAAK6B,EAAK7B,EAAM,GAAGpD,KAAOkF,EAAIlF,MAAM6G,QAAQ,IAM7E,IAAIjF,MAAMkC,GAAUwC,OAAOpE,KAAK,SAACqE,EAAInD,GACpC,OAAI8B,EAAI9E,eAAiBgD,EACd,kBAAC8C,EAAA,EAAD,CAAWG,MAAM,OAAOL,MAAO,CAACc,gBAAgB,eAAgB5B,EAAIhF,SAASmC,OAASe,EAAQ8B,EAAIhF,SAASkD,GAAS,IAEpH,kBAAC8C,EAAA,EAAD,CAAWG,MAAM,QAAQnB,EAAIhF,SAASmC,OAASe,EAAQ8B,EAAIhF,SAASkD,GAAS,OAI3FgC,GAAc,kBAACc,EAAA,EAAD,MAAad,EAAWF,EAAIlF,KAAK,KAAM6G,QAAQ,a,oBC1E5FnC,EAAYC,YAAW,CAC3BC,MAAO,CACLC,SAAU,IACVkC,SAAU,IACVZ,MAAO,OAMJ,SAASa,EAAYhC,GACxB,IAAMK,EAAUX,IADe,EAERF,IAAfyC,EAFuB,oBAEvBA,SACDnH,EAA4CmH,EAA5CnH,MAAOC,EAAqCkH,EAArClH,KAAMG,EAA+B+G,EAA/B/G,SAAUC,EAAqB8G,EAArB9G,IAAKC,EAAgB6G,EAAhB7G,aAC/BkF,EAAW,EAEf,OACI,kBAAC,IAAMC,SAAP,KACI,kBAACC,EAAA,EAAD,CAAgBC,UAAWC,KACvB,yBAAKM,MAAO,CAAEkB,SAAU,SACpB,wBAAIlB,MAAO,CAAEmB,WAAY,SAAWpH,EAApC,KAA4CD,EAAM8G,cAAlD,KACA,wBAAIZ,MAAO,CAAEmB,WAAY,SAAWhH,GACpC,kBAACwF,EAAA,EAAD,CAAOC,UAAWP,EAAQT,MAAOiB,aAAW,eAAeG,MAAO,CAACoB,YAAa,UAC5E,kBAACtB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACG,EAAA,EAAD,CAAWG,MAAM,QAAjB,OACA,kBAACH,EAAA,EAAD,CAAWG,MAAM,QAAjB,UAGR,kBAACG,EAAA,EAAD,KACKtG,EAASgC,KAAI,SAACgD,EAAK9B,GAEhB,OADAkC,IAEA,kBAACS,EAAA,EAAD,KACI,kBAACG,EAAA,EAAD,CAAWG,MAAM,QAAQf,GACxBlF,EAAa,IAAMkF,EAChB,kBAACY,EAAA,EAAD,CAAWG,MAAM,OAAOL,MAAO,CAACc,gBAAgB,eAAgB5B,GAEhE,kBAACgB,EAAA,EAAD,CAAWG,MAAM,QAAQnB,YC5CjE,SAASmC,IAIP,MAAO,CACLC,IAAI,GAAD,OAJO,GAIP,KACHC,KAAK,GAAD,OAJO,GAIP,KACJC,UAAU,cAAD,OANC,GAMD,eALE,GAKF,OAIb,IAAM9C,EAAYC,aAAW,SAAA8C,GAAK,MAAK,CACrCC,MAAO,CACLpC,SAAU,WACVa,MAAO,IACPW,gBAAiBW,EAAME,QAAQ1B,WAAWyB,MAC1CE,OAAQ,iBACRC,UAAWJ,EAAMK,QAAQ,GACzBC,QAASN,EAAMO,QAAQ,EAAG,EAAG,QAIpBC,EAAc,WAAO,IAAD,EACEzD,IADF,mBACrByC,EADqB,KACrBA,SAAWpG,EADU,KAEvBwE,EAAUX,IAFa,EAGRwD,IAAMC,SAASd,GAA7Be,EAHsB,oBAK7B,OAAKnB,EAKL,6BACI,kBAACoB,EAAA,EAAD,CACAC,kBAAgB,qBAChBC,mBAAiB,2BACjBC,OAAOvB,EACPwB,QAAS,kBAAI5H,EAAS,CAAE+C,KAAM,sBAC1B,yBAAKoC,MAAOoC,EAAYxC,UAAWP,EAAQqC,OACvC,kBAACV,EAAD,SAXD,+B,oCCzBTtC,EAAYC,aAAW,SAAC8C,GAAD,MAAY,CACvCiB,YAAa,CACXC,OAAQlB,EAAMO,QAAQ,GACtBnD,SAAU,KAEZ+D,YAAa,CACXC,UAAWpB,EAAMO,QAAQ,QAIhBc,EAAW,SAAC,GAAe,IAAdC,EAAa,EAAbA,QAClB1D,EAAUX,IADqB,EAENF,IAFM,mBAE7BwE,EAF6B,KAE7BA,SAAWnI,EAFkB,KAMrC,OACI,kBAACoI,EAAA,EAAD,CAAarD,UAAWP,EAAQqD,aAC9B,kBAACQ,EAAA,EAAD,cACA,kBAACC,EAAA,EAAD,CAAQ7E,MAAO0E,EAAUI,SAAU,SAAC/H,GAChCgI,OAAOC,QAAQC,UAAU,GAAI,GAA7B,UAAoCF,OAAOG,SAASC,SAApD,kBAAsEpI,EAAKqI,OAAOpF,QAClFzD,EAAS,CAAC+C,KAAK,kBAAmBvC,KAAKA,EAAKqI,OAAOpF,UAElDyE,EAAQ7G,KAAI,SAAAyH,GACT,OAAO,kBAACC,EAAA,EAAD,CAAUtF,MAAOqF,GAAKA,EAAG/C,qBCrB1ClC,EAAYC,YAAW,CACzBC,MAAO,CACLC,SAAU,KAEZC,OAAQ,SA0BL,SAAS+E,EAAU7E,GAAQ,IACxB3D,EAAiB2D,EAAjB3D,KAAMoH,EAAWzD,EAAXyD,QAGRxD,EAAO5D,EAAKa,KAAI,SAAAgD,GAChB,OA5BYnF,EA4BMmF,EAAInF,KA5BJ+J,EA4BU5E,EAAI4E,IA5BTC,EA4Bc7E,EAAI6E,OA5BVC,EA4BkB9E,EAAI8E,kBA5BJC,EA4BsB/E,EAAI+E,YA5BbnK,EA4B0BoF,EAAIpF,MA3B3F,CAAEC,OAAM+J,MAAKC,SAAQC,oBAAkBC,cAAanK,SAD7D,IAAoBC,EAAM+J,EAAKC,EAAQC,EAAkBC,EAAanK,KA+B5DuF,EAAUX,IACZY,EAAW,EAEf,OACI,kBAAC,IAAMC,SAAP,KACI,uBAAG2E,KAAK,IAAIzD,QAASgC,GAArB,QACA,kBAACjD,EAAA,EAAD,CAAgBC,UAAWC,KACvB,6BACI,kBAACC,EAAA,EAAD,CAAOC,UAAWP,EAAQT,MAAOiB,aAAW,gBACxC,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAUC,MAAO,CAAEC,WAAa,SAC5B,kBAACC,EAAA,EAAD,CAAWF,MAAO,CAAEG,MAAO,GAAIC,MAAM,SAAWC,MAAM,QAAtD,YACA,kBAACH,EAAA,EAAD,CAAWF,MAAO,CAAEI,MAAQ,UAA5B,QACA,kBAACF,EAAA,EAAD,CAAWF,MAAO,CAAEI,MAAQ,SAAUC,MAAM,QAA5C,SACA,kBAACH,EAAA,EAAD,CAAWF,MAAO,CAAEI,MAAQ,SAAUC,MAAM,QAA5C,uBACA,kBAACH,EAAA,EAAD,CAAWF,MAAO,CAAEI,MAAQ,SAAUC,MAAM,QAA5C,8BAGR,kBAACG,EAAA,EAAD,KACKvB,EAAK/C,KAAI,SAACgD,EAAI9B,GAEX,OADAkC,IAEA,kBAACS,EAAA,EAAD,CAAUC,MAAS5C,EAAQ,EAAI,CAAE6C,WAAa,WAAa,IACvD,kBAACC,EAAA,EAAD,CAAWG,MAAM,QAAQf,GACzB,kBAACY,EAAA,EAAD,CAAYT,UAAU,KAAKiB,MAAM,OAC7B,6BAAMxB,EAAInF,OAEd,kBAACmG,EAAA,EAAD,CAAWG,MAAM,QAAQnB,EAAI4E,IAAIjD,QAAQ,IACzC,kBAACX,EAAA,EAAD,CAAWG,MAAM,QAAQnB,EAAI6E,QAC7B,kBAAC7D,EAAA,EAAD,CAAWG,MAAM,QAxDrD,SAA0B8D,EAAQC,EAAOC,EAAQC,GAC7C,IAAKF,EACD,MAAO,0BAEX,IAAIG,EAAOH,EAAMN,IAAMK,EAAOL,IAE9B,GAAI,IAAOS,EAAOJ,EAAOH,kBACrB,MAAO,gBACJ,GAAKG,EAAOH,kBAEZ,CACCG,EAAOJ,SAAWI,EAAOH,oBACzBO,GAAQJ,EAAOJ,OAASI,EAAOH,mBAEnC,IAAIQ,GAAiBjK,WAAW4J,EAAOH,mBAAqBzJ,WAAWgK,IAAQ,IAC/E,OAAQF,EAAOC,EAAOH,EAAOrK,OAAS0K,GAAc3D,QAAQ,GAN5D,MAAO,+BA+C8C4D,CAAiBvF,EAAKD,EAAK7B,EAAM,GAAI4B,EAAMqF,OAAQrF,EAAMsF,kBCpEtH,IAAMA,EAAS,CAACI,GAAG,KAAKC,IAAI,KAAKC,GAAG,KAAKC,GAAG,KAAKC,GAAG,KAAKC,GAAG,KAAKC,GAAG,KAAKC,GAAG,KAAKC,GAAG,KAAKC,GAAG,IAAIC,IAAI,KAAKC,IAAI,KAAK,OAAO,KAAK,OAAO,KAAKC,GAAG,KAAKC,IAAI,KAAKC,IAAI,KAAKC,IAAI,KAAKC,IAAI,KAAKC,IAAI,KAAKC,IAAI,KAAKC,IAAI,KAAKC,IAAI,KAAKC,IAAI,KAAKC,IAAI,KAAKC,IAAI,KAAKC,IAAI,KAAKC,IAAI,KAAKC,IAAI,KAAKC,GAAG,KAAKC,IAAI,KAAKC,GAAG,IAAIC,GAAG,KAAKC,GAAG,KAAKC,GAAG,KAAKC,GAAG,IAAIC,GAAG,KAAKC,IAAI,KAAKC,GAAG,EAAEC,GAAG,KAAKC,GAAG,KAAKC,GAAG,KAAK1G,GAAG,KAAK2G,GAAG,KAAKC,KAAK,KAAKC,GAAG,IAAIC,GAAG,KAAKC,GAAG,IAAIC,GAAG,KAAKC,KAAK,KAAKC,KAAK,KAAKC,KAAK,MAEhcC,EAAS,SAACC,GACZ,IAgBInK,EAAM,GAaV,OAZAoK,OAAOC,KAAKF,GAASnM,SAAQ,SAAA3B,GAErB2D,EADU,MAAV3D,EACM2D,EAAIsK,OAAiBH,EAAQ9N,GAlB1BoC,KAAI,SAAAlC,GACb,IAAIgO,EAAUhO,EAAKA,KACfF,EAAQE,EAAKF,MAAMmO,UAAU,GAClB,MAAXD,IAEAA,GAAWhO,EAAKA,KAAOsK,EAAOxK,IAAQ+G,QAAQ,IAElD,IAAIqH,EAAclO,EAAKE,SAASgC,KAAI,SAAAlC,GAEhC,QADAA,EAAOA,EAAKqD,MAAM,KAAK,IACViH,EAAOxK,IAAQ+G,QAAQ,MAExC,OAAO,IAAIhH,EAAKG,EAAKF,MAAME,EAAKD,KAAKiO,EAAQhO,EAAKC,OAAOiO,EAAalO,EAAKG,IAAKH,EAAKI,kBAS/EqD,EAAIsK,OAAOH,EAAQ9N,OAIjC2D,EAAIlB,MAAK,SAACzB,EAAE0B,GACR,OAAO1B,EAAEd,KAAKwC,EAAExC,QAGbyD,GAGL0K,EAAS,SAACP,GACZ,IAaInK,EAAM,GAaV,OAZAoK,OAAOC,KAAKF,GAASnM,SAAQ,SAAA3B,GAErB2D,EADU,MAAV3D,EACM2D,EAAIsK,OAAiBH,EAAQ9N,GAf1BoC,KAAI,SAAAlC,GAEb,OAAO,IAAIH,EAAKG,EAAKF,MAAME,EAAKD,KAAKC,EAAKA,KAAKA,EAAKC,OAAQD,EAAKE,SAAUF,EAAKG,IAAKH,EAAKI,kBAepFqD,EAAIsK,OAXD,SAAC/K,EAAOlD,GACrB,OAAOkD,EAAMd,KAAI,SAAAlC,GACb,OAAO,IAAIH,EAAKG,EAAKF,MAAME,EAAKD,MAAMC,EAAKA,KAAKsK,EAAOxK,IAAQ+G,QAAQ,GAAG7G,EAAKC,OAAQD,EAAKE,SAAUF,EAAKG,IAAKH,EAAKI,iBASpGgO,CAASR,EAAQ9N,GAAOA,OAIjD2D,EAAIlB,MAAK,SAACzB,EAAE0B,GACR,OAAO1B,EAAEd,KAAKwC,EAAExC,QAGbyD,GAGE4K,EAAa,SAACrJ,GAAU,IAAD,EACRmD,qBADQ,mBACzB9G,EADyB,KACnBiN,EADmB,OAEFnG,mBAAS,IAFP,mBAEzB9C,EAFyB,KAEhBkJ,EAFgB,OAGJpG,mBAAS,IAHL,mBAGzBkC,EAHyB,KAGjBmE,EAHiB,OAIJrG,mBAAS,MAJL,mBAIzBsG,EAJyB,KAIfC,EAJe,OAKAvG,oBAAS,GALT,mBAKzBwG,EALyB,KAKfC,EALe,KAQ1BC,EAAO,uCAAG,WAAOC,GAAP,SAAAhO,EAAA,sEACCgO,EADD,mFAAH,sDAIPC,EAAW,WACb,GAAI1F,OAAOG,SAASwF,QAAU3F,OAAOG,SAASwF,OAAOC,SAAS,WAAW,CACrE,IAAIC,EAAM7F,OAAOG,SAASwF,OAAOG,QAAQ,UAAU,IAAI5L,QACnDsK,OAAOC,KAAKxD,GAAQ2E,SAASC,IAEd,QAARA,IADPrO,EAAS,CAAC+C,KAAK,kBAAmBvC,KAAK6N,SAK3CrO,EAAS,CAAC+C,KAAK,kBAAmBvC,KAAM,SAK1C+N,EAAgB,SAACC,EAASC,GAC5BA,EAAI7N,SAAQ,SAAA0I,GACR,GAAIkF,EAAQlF,EAAM,MAAU,CACxB,IAAIoF,GAAyBD,EAAI,GAAGtP,KAAKmK,EAAOnK,KAAK,KAAM6G,QAAQ,GACnEwI,EAAQlF,EAAM,MAAUrK,MAAQqK,EAAOrK,MACvCuP,EAAQlF,EAAM,MAAUH,kBAAoBuF,EAC5CF,EAAQlF,EAAM,MAAUF,YAAcE,EAAOnK,KACzCqP,EAAQlF,EAAM,MAAU7H,QAAUiN,IACQ,GAAtCF,EAAQlF,EAAM,MAAU1H,YACxB4M,EAAQlF,EAAM,MAAUlI,OAAOuN,MAC/BH,EAAQlF,EAAM,MAAUlI,OAAOuB,KAAK+L,IAEpCF,EAAQlF,EAAM,MAAUlI,OAAOuB,KAAK+L,QAMpD,IAAMnL,EAAU,SAACqL,EAAaC,GAAd,OAA+BnP,WAAWkP,GAAelP,WAAWmP,IAEpF7B,OAAOC,KAAKuB,GAAS5N,SAAQ,SAAA0I,GACzB,IAAIJ,EAAS,KACbsF,EAAQlF,GAAQlI,OAAOR,SAAQ,SAAAkO,GACvBpP,WAAWoP,GAAM5F,IACjBA,EAASxJ,WAAWoP,OAG5BN,EAAQlF,GAAQL,IAAMuF,EAAQlF,GAAQlI,OAAO2N,OAAOxL,GACpDiL,EAAQlF,GAAQJ,OAASA,KAG7B,IAAI8F,EAAMhC,OAAOC,KAAKuB,GAASnN,KAAI,SAAAiI,GAAM,OAAEkF,EAAQlF,MACnD0F,EAAMA,EAAItN,MAAK,SAACzB,EAAE0B,GACd,OAAQA,EAAEsH,IAAMhJ,EAAEgJ,OAEtB4E,EAAQmB,IA7DoB,EAgEmBrL,IAhEnB,0BAgExBwE,EAhEwB,EAgExBA,SAAUnG,EAhEc,EAgEdA,SAAUgB,EAhEI,EAgEJA,SAAWhD,EAhEP,KA2FhC,OA1BAiP,qBAAU,WAAM,4CACZ,oCAAAhP,EAAA,sEACwB+N,EAAQnM,EAAU,+EAAgF,IAAIqN,MAAOC,UAAWnP,IADhJ,cACQ+M,EADR,gBAE4BiB,EAAQlO,EAAQ,sHAAuH,IAAIoP,MAAOC,UAAWnP,IAFzL,OAEQoP,EAFR,OAIQxM,EAAMkK,EAAOC,GACb0B,EAAMnB,EAAOP,GACjBA,EAAO,IAAUnK,EACjBmK,EAAO,IAAU0B,EACjBd,EAAUZ,EAAO,IAAQ,GAAG5N,MAC5BsO,EAAQV,GACJsC,EAAYrC,OAAOC,KAAKF,GAC5BsC,EAAS,CAAI,MAAO,OAAX,mBAAqBA,EAAUpO,MAAM,EAAEoO,EAAU7N,OAAO,KACjEkM,EAAW2B,GACXnB,IAEAK,EAAca,EAAaX,GAf/B,6CADY,uBAAC,WAAD,wBAqBZa,KACF,IAEF9G,OAAO+G,WAAa,SAAAC,GAAC,OAAItB,KAGrB,kBAAC,IAAMxJ,SAAP,KACKlE,GAAQgE,GAAW2D,IAAa2F,GAC7B,6BACI,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAU5F,QAAS1D,IACnB,uBAAGW,MAAO,CAACsK,MAAM,QAASC,aAAa,MAAOC,WAAW,OAAQtG,KAAK,gCAAtE,wBACA,6BACA,uBAAGlE,MAAO,CAACsK,MAAM,QAASC,aAAa,MAAOC,WAAW,OAAQ/J,QAAS,WAAKmI,GAAY,IAAO1E,KAAK,KAAvG,kBAEc,QAAblB,GAAmC,QAAbA,EAEf,6BACI,6BACA,+DAAqCqB,EAAOC,EAAOtB,IAAWnC,QAAQ,KAG1E,6BACI,6BACA,gDAAsBhD,EAAtB,KACA,2CAAiBhB,IAG7B,kBAACkC,EAAD,CAAY0L,MAAM,MAAMpP,KAAMA,EAAK2H,GAAWjJ,KAAMiJ,EAAUqB,OAAQA,KAI7EhJ,GAAQgE,GAAW2D,GAAY2F,GAAYF,GACxC,kBAAC5E,EAAD,CAAWxI,KAAMoN,EAAUhG,QAAS,WAAKmG,GAAY,IAASvE,OAAQA,EAAQC,OAAQA,MCtLlFoG,QACW,cAA7BrH,OAAOG,SAASmH,UAEe,UAA7BtH,OAAOG,SAASmH,UAEhBtH,OAAOG,SAASmH,SAASC,MACvB,2D,YCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,CAAe7M,aAAc,CAAC+C,SAAS,KAAM+B,SAAU,OAAQ5E,QCV5C,SAAC4M,EAAOC,GAC7B,OAAQA,EAAOrN,MACb,IAAK,kBACD,OAAO,eAAIoN,EAAX,CAAkB/J,SAAUgK,EAAO5P,OACvC,IAAK,kBACD,OAAO,eAAI2P,EAAX,CAAkB/J,SAAU,OAChC,IAAK,kBACD,OAAO,eAAI+J,EAAX,CAAkBhI,SAAUiI,EAAO5P,OACvC,IAAK,iBACD,OAAO,eAAI2P,EAAX,CAAkBnO,SAAUoO,EAAO5P,KAAKwB,SAAUgB,SAAUoN,EAAO5P,KAAKwC,SAAUC,QAASmN,EAAO5P,KAAKyC,UAC3G,QACI,OAAOkN,KDAT,kBAAC,EAAD,QAGJE,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.a86d884f.chunk.js","sourcesContent":["export class Time{\n    parseTime(time){\n        time = parseFloat(time,10);\n        if (isNaN(time)){\n            return 999;\n        } else {\n            return time;\n        }\n    }\n    constructor(clazz, name, time, number, rawTimes, car, fastestIndex){\n        this.clazz = clazz;\n        this.name = name;\n        this.time = this.parseTime(time);\n        this.number = number;\n        this.rawTimes = rawTimes;\n        this.car = car;\n        this.fastestIndex = fastestIndex;\n    }\n}","import {Time} from './time';\n\nconst axios = require('axios');\n\nexport const getDOTY = async (url, dispatch) => {\n    let res = await axios.get(url);\n    let parser = new DOMParser();\n    let doc = parser.parseFromString(res.data.contents, \"text/html\");\n    let data = {}\n    let startSkipping = false;\n    doc.querySelectorAll(\"body > table:nth-child(6) > tbody > tr\").forEach(tr=>{\n        if (startSkipping){return}\n        let trs = tr.querySelectorAll('td');\n        trs = Array.prototype.slice.call(trs);\n        let name = trs[1].innerText;\n        trs = trs.slice(4);\n        \n        let points = trs.map(point=> parseFloat(point.innerText));\n        points = points.filter(a=>!isNaN(a));\n        startSkipping = points.length < 5 ? true : false;\n\n        if (startSkipping){return}\n\n        points = points.sort((a,b)=> b-a);\n        points = points.slice(0,6)\n\n        let lowTime = 0;\n        if (points.length > 5){\n            lowTime = points[5];\n        }\n        data[name] = {name:name, lowTime: lowTime, totalTimes: points.length, points:points};\n\n    })\n\n    return data;\n};\n\nexport const getTiming = async (url, dispatch) => {\n    let res = await axios.get(url);\n\n    let parser = new DOMParser();\n    let doc = parser.parseFromString(res.data.contents, \"text/html\");\n    let data = {};\n    let currentClass = \"\";\n    let maxNumberOfRuns = 0;\n    let conesHit = 0;\n    let numberOfRun = 0;\n    doc.querySelectorAll(\"body > a > table:nth-child(4) > tbody > tr\").forEach(tr=> {\n        if (tr.querySelector(\"th\")){\n            currentClass = tr.querySelector(\"a\").name;\n            data[currentClass] = []\n        } else {\n            let clazz = tr.querySelector(\"td:nth-child(2)\").innerText;\n            let number = tr.querySelector(\"td:nth-child(3)\").innerText;\n            let name = tr.querySelector(\"td:nth-child(4)\").innerText;\n            let car = tr.querySelector(\"td:nth-child(5)\").innerText;\n            let times = Array.prototype.slice.call(tr.querySelectorAll(\"td:nth-child(n+7)\"));\n\n            times = times.slice(0,times.length-2);\n\n            let actualTimes = [];\n            let rawTimes = [];\n            let fastest = 999;\n            let fastestIndex = -1;\n            times.forEach((timeHtml,index) => {\n                let time = timeHtml.innerText.split(\"+\").map(s=>s.trim());\n                rawTimes.push(timeHtml.innerText.trim());\n                if (time.length === 1){\n                    if (time[0] === \"\"){\n                        return;\n                    }\n                    let raw = parseFloat(time,10);\n                    actualTimes.push(raw);\n                    numberOfRun++;\n                    if (raw < fastest){\n                        fastest = raw;\n                        fastestIndex = index;\n                    }\n                } else if (time.length === 2) {\n                    if (time[1] === \"dnf\" || time[1] === \"dns\" ){\n                        actualTimes.push(999);\n                        return;\n                    }\n                    let cones = parseFloat(time[1],10);\n                    if (isNaN(cones)) cones = 0;\n                    let raw = parseFloat(time,10) + cones * 2;\n                    conesHit+= cones;\n                    numberOfRun++;\n                    actualTimes.push(raw);\n                    if (raw < fastest){\n                        fastest = raw;\n                        fastestIndex = index;\n                    }\n                }\n            });\n            let bestTime = actualTimes.sort((a,b)=>a-b)[0];\n            data[currentClass].push(new Time(clazz,name,bestTime, number, rawTimes, car, fastestIndex));\n            if (rawTimes.length > maxNumberOfRuns){\n                maxNumberOfRuns = rawTimes.length;\n            }\n        }\n    });\n\n    dispatch({type:\"RUNS_AND_CONES\", data:{conesHit:conesHit, runCount: numberOfRun, maxRuns: maxNumberOfRuns}})\n\n    \n    return data;\n}","import React, {createContext, useContext, useReducer} from 'react';\nexport const StateContext = createContext();\n\n\nexport const StateProvider = ({initialState, children, reducer}) =>(\n  <StateContext.Provider value={useReducer(reducer, initialState)}>\n    {children}\n  </StateContext.Provider>\n);\nexport const useStateValue = () => useContext(StateContext);\n\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { useStateValue } from './context/context';\n\nconst useStyles = makeStyles({\n    table: {\n      minWidth: 500, \n    },\n    height: \"35px\"\n  });\n\nfunction createData(name, number, time, clazz, rawTimes, car, fastestIndex) {\n  return { name, number, time, clazz, rawTimes, car, fastestIndex};\n}\n\nexport function AutoXTable(props) {\n\n    let { data, name } = props\n    const [{maxRuns}, dispatch] = useStateValue();\n\n    let rows = data.map(row => {\n        return createData(row.name, row.number, row.time, row.clazz, row.rawTimes, row.car, row.fastestIndex)\n    })\n\n    let topPaxtime = null;\n\n    if (rows && rows.length > 1 && name === 'PAX'){\n        topPaxtime = rows[0].time;\n    } else if (rows && name !== \"RAW\"){\n        topPaxtime = rows[0].time;\n    }\n    const classes = useStyles();\n    let position = 0;\n    return (\n        <React.Fragment>    \n            <TableContainer component={Paper}>\n                <div>\n                    <Table className={classes.table} aria-label=\"simple table\" >\n                        <TableHead>\n                            <TableRow style={{ background : \"gray\"}}>\n                                <TableCell style={{ width: 25, color:\"white\" }} align=\"left\">Position</TableCell>\n                                <TableCell style={{ color : \"white\"}} >Name</TableCell>\n                                <TableCell style={{ color : \"white\"}} align=\"left\">Number</TableCell>\n                                <TableCell style={{ color : \"white\"}} align=\"left\">Best</TableCell>\n                                <TableCell style={{ color : \"white\"}} align=\"left\">Diff</TableCell>\n                                \n                                { (new Array(maxRuns)).fill().map( (em, index) => {\n                                    return <TableCell style={{ color : \"white\"}} align=\"left\">{index+1}</TableCell>\n                                })}\n                                {topPaxtime && <TableCell style={{ color : \"white\"}} align=\"left\">DOTY Points</TableCell>}\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {rows.map((row,index) => {\n                                position++;\n                                return (\n                                <TableRow style ={ index % 2 ? { background : \"#f2f2f2\" }: {}    }>\n                                    <TableCell align=\"left\">{position}</TableCell>\n                                    <TableCell onClick={()=>dispatch({type: \"SELECTED_DRIVER\", data: row})} component=\"th\" scope=\"row\">\n                                        <div style={{color:\"blue\", cursor: \"pointer\"}}>{row.name}</div>\n                                    </TableCell>\n                                    <TableCell align=\"left\">{row.number + \" \" + row.clazz.toUpperCase()}</TableCell>\n                                    <TableCell align=\"left\">{row.time}</TableCell>\n                                    <TableCell>{row && row.fastestIndex && row.rawTimes && \n                                        index === 0 || !rows[index-1] ? 0 : (rows[index-1].time - row.time).toFixed(3)\n                                    }\n                                     </TableCell>\n                                   \n\n                                   \n                                    { (new Array(maxRuns)).fill().map( (em, index) => {\n                                        if (row.fastestIndex === index){\n                                            return <TableCell align=\"left\" style={{backgroundColor:\"lightgreen\"}}>{row.rawTimes.length > index ? row.rawTimes[index] : \"\"}</TableCell>\n                                        } else {\n                                            return <TableCell align=\"left\">{row.rawTimes.length > index ? row.rawTimes[index] : \"\"}</TableCell>\n                                        }\n\n                                    })}\n                                    {topPaxtime && <TableCell>{(topPaxtime/row.time*1000).toFixed(3)}</TableCell>}\n                                </TableRow>\n                            )})}\n                        </TableBody>\n                    </Table>\n                </div>\n            </TableContainer>\n        </React.Fragment>\n    );\n}\n","import React from 'react';\nimport { useStateValue } from './context/context'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 500,\n    maxWidth: 500,\n    width: 500\n  },\n\n});\n\n\nexport function DriverTable(props) {\n    const classes = useStyles();\n    const [{selected}, ] = useStateValue()\n    const {clazz, name, rawTimes, car, fastestIndex} = selected;\n    let position = 0;\n\n    return (\n        <React.Fragment>    \n            <TableContainer component={Paper}>\n                <div style={{ overflow: 'auto'}}>\n                    <h2 style={{ marginLeft: \"15px\" }}>{name} ({clazz.toUpperCase()})</h2>\n                    <h4 style={{ marginLeft: \"15px\" }}>{car}</h4>\n                    <Table className={classes.table} aria-label=\"simple table\" style={{tableLayout: 'fixed'}}>\n                        <TableHead>\n                            <TableRow>\n                                <TableCell align=\"left\">Run</TableCell>\n                                <TableCell align=\"left\">Time</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {rawTimes.map((row, index) => {\n                                position++;\n                                return (\n                                <TableRow>\n                                    <TableCell align=\"left\">{position}</TableCell>\n                                    {fastestIndex+1 === position ?\n                                        <TableCell align=\"left\" style={{backgroundColor:\"lightgreen\"}}>{row}</TableCell>\n                                        :\n                                        <TableCell align=\"left\">{row}</TableCell>\n                                    }\n                                </TableRow>\n                            )})}\n                        </TableBody>\n                    </Table>\n                </div>\n            </TableContainer>\n        </React.Fragment>\n    );\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Modal from '@material-ui/core/Modal';\nimport {DriverTable} from './DriverTable';\nimport { useStateValue } from './context/context';\nfunction getModalStyle() {\n  const top = 50;\n  const left = 50;\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\n\nconst useStyles = makeStyles(theme => ({\n  paper: {\n    position: 'absolute',\n    width: 400,\n    backgroundColor: theme.palette.background.paper,\n    border: '2px solid #000',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n\nexport const DriverModal = () => {\n    const [{selected}, dispatch] = useStateValue()\n    const classes = useStyles();\n    const [modalStyle] = React.useState(getModalStyle);\n\n    if (!selected){\n        return <div/>;\n    }\n    \n    return (\n    <div>\n        <Modal\n        aria-labelledby=\"simple-modal-title\"\n        aria-describedby=\"simple-modal-description\"\n        open={ selected ? true : false }\n        onClose={()=>dispatch({ type: 'DESELECT_DRIVER'})}>\n            <div style={modalStyle} className={classes.paper}>\n                <DriverTable />\n            </div>\n        </Modal>\n    </div>\n    );\n    }","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport { useStateValue } from './context/context'\n\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n}));\n\nexport const Dropdown = ({clazzes}) => {\n  const classes = useStyles();\n  const [{dropdown}, dispatch] = useStateValue();\n\n\n\n  return (\n      <FormControl className={classes.formControl}>\n        <InputLabel>Class</InputLabel>\n        <Select value={dropdown} onChange={(data)=>{\n            window.history.pushState(\"\", \"\", `${window.location.pathname}?class=${data.target.value}` );\n            dispatch({type:\"UPDATE_DROPDOWN\", data:data.target.value\n          })}}>\n            {clazzes.map(cl => {\n                return <MenuItem value={cl}>{cl.toUpperCase()}</MenuItem>\n            })}\n        </Select>\n      </FormControl>\n  );\n};","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { useStateValue } from './context/context';\n\nconst useStyles = makeStyles({\n    table: {\n      minWidth: 500, \n    },\n    height: \"35px\"\n  });\n\nfunction createData(name, sum, lowest, currentEventScore,currentTime, clazz) {\n  return { name, sum, lowest, currentEventScore,currentTime, clazz};\n}\n\nfunction getNeedsToMoveUp(driver, above, topPax, paxMap){\n    if (!above){\n        return \"Lonely at the top Caleb\"\n    }\n    let diff = above.sum - driver.sum;\n\n    if (1000 < diff + driver.currentEventScore  ){\n        return \"Can't move up\"\n    } else if (!driver.currentEventScore){\n        return \"Can't move up if not running\"\n    } else {\n        if (driver.lowest !== driver.currentEventScore){\n            diff += driver.lowest - driver.currentEventScore \n        }\n        let pointsNeeded = ((parseFloat(driver.currentEventScore) + parseFloat(diff)))/1000 ;\n        return (topPax/paxMap[driver.clazz] / pointsNeeded).toFixed(3)        \n    }\n}\n\nexport function DotyTable(props) {\n    let { data, onClose} = props\n\n\n    let rows = data.map(row => {\n        return createData(row.name, row.sum, row.lowest, row.currentEventScore,row.currentTime, row.clazz)\n    })\n\n    const classes = useStyles();\n    let position = 0;\n\n    return (\n        <React.Fragment>    \n            <a href=\"#\" onClick={onClose} >Back</a>\n            <TableContainer component={Paper}>\n                <div>\n                    <Table className={classes.table} aria-label=\"simple table\" >\n                        <TableHead>\n                            <TableRow style={{ background : \"gray\"}}>\n                                <TableCell style={{ width: 25, color:\"white\" }} align=\"left\">Position</TableCell>\n                                <TableCell style={{ color : \"white\"}} >Name</TableCell>\n                                <TableCell style={{ color : \"white\"}} align=\"left\">Score</TableCell>\n                                <TableCell style={{ color : \"white\"}} align=\"left\">Lowest scored Event</TableCell>\n                                <TableCell style={{ color : \"white\"}} align=\"left\">Raw time need to move up</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {rows.map((row,index) => {\n                                position++;\n                                return (\n                                <TableRow style ={ index % 2 ? { background : \"#f2f2f2\" }: {}    }>\n                                    <TableCell align=\"left\">{position}</TableCell>\n                                    <TableCell  component=\"th\" scope=\"row\">\n                                        <div>{row.name}</div>\n                                    </TableCell>\n                                    <TableCell align=\"left\">{row.sum.toFixed(2)}</TableCell>\n                                    <TableCell align=\"left\">{row.lowest}</TableCell>\n                                    <TableCell align=\"left\">{getNeedsToMoveUp(row, rows[index-1], props.topPax, props.paxMap)}</TableCell>\n                                   \n                                </TableRow>\n                            )})}\n                        </TableBody>\n                    </Table>\n                </div>\n            </TableContainer>\n        </React.Fragment>\n    );\n}\n","import React, {useState, useEffect}  from 'react';\nimport {getTiming, getDOTY} from './service/service';\nimport {AutoXTable} from './table';\nimport './App.css';\nimport { Time } from './service/time';\nimport { DriverModal } from './Modal';\nimport { Dropdown } from './dropdown';\nimport { DotyTable } from './dotyTable';\nimport { useStateValue } from './context/context'\n\nconst paxMap = {ss:.822,fsp:.823,as:.819,bs:.814,cs:.809,ds:.806,es:.794,fs:.803,gs:.792,hs:.78,hcs:.792,ssr:.843,\"xs-a\":.844,\"xs-b\":.864,ev:.824,ssp:.853,asp:.849,bsp:.852,csp:.865,dsp:.842,esp:.839,fsf:.823,sts:.812,stx:.816,str:.827,stu:.828,sth:.813,ssc:.801,smf:.841,sm:.854,ssm:.875,xp:.88,bp:.867,cp:.851,dp:.866,ep:.85,fp:.868,hcr:.815,am:1,bm:.962,cm:.893,dm:.895,em:.896,fm:.911,fsae:.963,km:.93,ja:.855,jb:.82,jc:.718,camc:.818,camt:.817,cams:.833,}\n\nconst getRaw = (results) => {\n    const fixNovice = (times) => {\n        return times.map(time=>{\n            let runTime = time.time\n            let clazz = time.clazz.substring(1);\n            if (runTime!== 999){\n\n                runTime = (time.time / paxMap[clazz]).toFixed(3);\n            }\n            let noviceTimes = time.rawTimes.map(time=>{\n                time = time.split(\"+\")[0]\n                return (time/paxMap[clazz]).toFixed(3)\n            })\n            return new Time(time.clazz,time.name,runTime,time.number,noviceTimes, time.car, time.fastestIndex);\n        })\n    }\n\n    let raw = [];\n    Object.keys(results).forEach(clazz => {\n        if (clazz === 'n'){\n            raw = raw.concat(fixNovice(results[clazz]));\n        } else {\n            raw = raw.concat(results[clazz]);\n        }\n        \n    })\n    raw.sort((a,b)=> {\n        return a.time-b.time;\n    })\n    \n    return raw\n}\n\nconst getPax = (results) => {\n    const fixNovice = (times) => {\n        return times.map(time=>{\n            \n            return new Time(time.clazz,time.name,time.time,time.number, time.rawTimes, time.car, time.fastestIndex);\n        })\n    }\n\n    const applyPax = (times, clazz) => {\n        return times.map(time=>{\n            return new Time(time.clazz,time.name,(time.time*paxMap[clazz]).toFixed(3),time.number, time.rawTimes, time.car, time.fastestIndex);\n        })\n    }\n\n    let raw = [];\n    Object.keys(results).forEach(clazz => {\n        if (clazz === 'n'){\n            raw = raw.concat(fixNovice(results[clazz]));\n        } else {\n            raw = raw.concat(applyPax(results[clazz],clazz));\n        }\n        \n    })\n    raw.sort((a,b)=> {\n        return a.time-b.time;\n    })\n    \n    return raw\n}\n\nexport const LiveTiming = (props) =>{\n    const [data, setData] = useState();\n    const [classes, setClasses] = useState(\"\");\n    const [topPax, setTopPax] = useState(\"\");\n    const [dotyData, setDoty] = useState(null);\n    const [showDoty, setShowDoty] = useState(false)\n\n\n    const getData = async (promise) => {\n        return await promise;\n    }\n\n    const checkurl = () => {\n        if (window.location.search && window.location.search.includes(\"?class=\")){\n            let val = window.location.search.replace(\"?class=\",\"\").trim();\n            if (Object.keys(paxMap).includes(val)){\n                dispatch({type:\"UPDATE_DROPDOWN\", data:val})\n            } else if (val === \"RAW\"){\n                dispatch({type:\"UPDATE_DROPDOWN\", data:val})\n            }\n        } else {\n            dispatch({type:\"UPDATE_DROPDOWN\", data: \"PAX\"})\n        }\n    }\n\n\n    const calculateDOTY = (dotyRes, pax) => {\n        pax.forEach(driver=>{\n            if (dotyRes[driver['name']]){\n                let currentPointsForEvent = (pax[0].time/driver.time*1000).toFixed(2);\n                dotyRes[driver['name']].clazz = driver.clazz\n                dotyRes[driver['name']].currentEventScore = currentPointsForEvent\n                dotyRes[driver['name']].currentTime = driver.time;\n                if (dotyRes[driver['name']].lowTime < currentPointsForEvent){\n                    if (dotyRes[driver['name']].totalTimes == 6){\n                        dotyRes[driver['name']].points.pop();\n                        dotyRes[driver['name']].points.push(currentPointsForEvent);\n                    } else {\n                        dotyRes[driver['name']].points.push(currentPointsForEvent);\n                    }\n                }\n                \n            }\n        })\n        const reducer = (accumulator, currentValue) => parseFloat(accumulator) + parseFloat(currentValue);\n\n        Object.keys(dotyRes).forEach(driver=>{\n            let lowest = 1001;\n            dotyRes[driver].points.forEach(po=>{\n                if (parseFloat(po) < lowest){\n                    lowest = parseFloat(po);\n                }\n            });\n            dotyRes[driver].sum = dotyRes[driver].points.reduce(reducer);\n            dotyRes[driver].lowest = lowest;\n        });\n\n        let arr = Object.keys(dotyRes).map(driver=>dotyRes[driver])\n        arr = arr.sort((a,b)=>{\n            return  b.sum - a.sum\n        })\n        setDoty(arr);\n    }\n\n    const [{dropdown, conesHit, runCount}, dispatch] = useStateValue();\n    useEffect(() => {\n        async function fetchData() {\n            let results = await getData(getTiming(\"https://api.allorigins.win/get?url=stcsolo.com/live/results_live.htm?cache=\" + new Date().getTime(), dispatch));\n            let dotyResults = await getData(getDOTY(\"https://api.allorigins.win/get?url=stcsolo.com/wp-content/uploads/2020/09/2020_event9_paxpoints_6scores.htm?cache=\" + new Date().getTime(), dispatch));\n\n            let raw = getRaw(results)\n            let pax = getPax(results)\n            results['RAW'] = raw;\n            results['PAX'] = pax;\n            setTopPax(results['PAX'][0].time)\n            setData(results);\n            let classList = Object.keys(results);\n            classList = [\"PAX\", \"RAW\", ...classList.slice(0,classList.length-2)]\n            setClasses(classList)\n            checkurl();\n\n            calculateDOTY(dotyResults, pax)\n        }\n  \n\n\n        fetchData();\n    },[]);\n    \n    window.onpopstate = e => checkurl();\n    \n    return (\n        <React.Fragment>\n            {data && classes && dropdown && !showDoty &&\n                <div>\n                    <DriverModal />\n                    <Dropdown clazzes={classes} />\n                    <a style={{float:\"right\", paddingRight:\"1em\", paddingTop:\"1em\"}} href=\"mailto:gosefroba22@gmail.com\">Issue or Suggestion?</a>  \n                    <br/>\n                    <a style={{float:\"right\", paddingRight:\"1em\", paddingTop:\"1em\"}} onClick={()=>{setShowDoty(true)}}href=\"#\">Show Live DOTY</a>  \n\n                    {dropdown !== 'PAX' && dropdown !== 'RAW'\n                        ?\n                            <div>\n                                <br/>\n                                <div>Time needed to match top PAX: {(topPax/paxMap[dropdown]).toFixed(3) }</div>\n                            </div>\n                        :\n                            <div>\n                                <br/>\n                                <div>Number of runs: {runCount} </div>\n                                <div>Cones hit: {conesHit}</div>\n                            </div>\n                    }\n                    <AutoXTable class=\"col\" data={data[dropdown]} name={dropdown} topPax={topPax} />\n                </div>\n            }\n\n            {data && classes && dropdown && showDoty && dotyData &&\n                <DotyTable data={dotyData} onClose={()=>{setShowDoty(false)}} topPax={topPax} paxMap={paxMap}></DotyTable>\n            }\n\n\n        </React.Fragment>\n    )\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {LiveTiming} from './LiveTiming';\nimport * as serviceWorker from './serviceWorker';\nimport { StateProvider } from './context/context'\nimport { reducer } from './context/reducer'\n\nReactDOM.render(\n  <React.StrictMode>\n    <StateProvider initialState={{selected:null, dropdown: \"PAX\"}} reducer={reducer} >\n      <LiveTiming />\n    </StateProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const reducer = (state, action) => {\n  switch (action.type) {\n    case 'SELECTED_DRIVER':\n        return {...state, selected: action.data };\n    case 'DESELECT_DRIVER':\n        return {...state, selected: null };\n    case 'UPDATE_DROPDOWN':\n        return {...state, dropdown: action.data }\n    case 'RUNS_AND_CONES':\n        return {...state, conesHit: action.data.conesHit, runCount: action.data.runCount, maxRuns: action.data.maxRuns}\n    default:\n        return state;\n  }\n};"],"sourceRoot":""}