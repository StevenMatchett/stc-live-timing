{"version":3,"sources":["service/time.js","service/service.js","table.js","LiveTiming.js","serviceWorker.js","index.js"],"names":["Time","clazz","name","time","number","this","parseTime","parseFloat","isNaN","axios","require","getTiming","url","a","get","res","parser","DOMParser","doc","parseFromString","data","contents","currentClass","querySelectorAll","forEach","tr","querySelector","innerText","times","Array","prototype","slice","call","length","actualTimes","timeHtml","split","map","s","trim","push","cones","sort","b","useStyles","makeStyles","table","minWidth","maxWidth","width","height","AutoXTable","rows","row","createData","classes","position","Fragment","TableContainer","component","Paper","style","overflow","borderStyle","marginLeft","toUpperCase","Table","className","aria-label","tableLayout","TableHead","TableRow","TableCell","align","TableBody","key","scope","paxMap","ss","as","bs","cs","ds","es","fs","gs","hs","hcs","ssr","ev","ssp","asp","bsp","csp","dsp","esp","fsf","sts","stx","str","stu","sth","ssc","smf","sm","ssm","xp","bp","cp","dp","ep","fp","hcr","am","bm","cm","dm","em","fm","fsae","km","ja","jb","jc","camc","camt","cams","getRaw","results","raw","Object","keys","concat","runTime","substring","toFixed","getPax","applyPax","LiveTiming","props","useState","setData","getData","promise","useEffect","pax","fetchData","class","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3276cc28.chunk.js","sourcesContent":["export class Time{\n    parseTime(time){\n        time = parseFloat(time,10);\n        if (isNaN(time)){\n            return 999;\n        } else {\n            return time;\n        }\n    }\n    constructor(clazz, name, time, number){\n        this.clazz = clazz;\n        this.name = name;\n        this.time = this.parseTime(time);\n        this.number = number;\n    }\n}","import {Time} from './time';\nconst axios = require('axios');\n\n\nexport const getTiming = async (url) => {\n    let res = await axios.get(url);\n\n    let parser = new DOMParser();\n    let doc = parser.parseFromString(res.data.contents, \"text/html\");\n    let data = {};\n    let currentClass = \"\";\n    doc.querySelectorAll(\"body > a > table:nth-child(4) > tbody > tr\").forEach(tr=> {\n        if (tr.querySelector(\"th\")){\n            currentClass = tr.querySelector(\"a\").name;\n            data[currentClass] = []\n        } else {\n            let clazz = tr.querySelector(\"td:nth-child(2)\").innerText;\n            let number = tr.querySelector(\"td:nth-child(3)\").innerText;\n            let name = tr.querySelector(\"td:nth-child(4)\").innerText;\n            let times = Array.prototype.slice.call(tr.querySelectorAll(\"td:nth-child(n+7)\"));\n            times = times.slice(0,times.length-2);\n\n            let actualTimes = [];\n            times.forEach(timeHtml => {\n                let time = timeHtml.innerText.split(\"+\").map(s=>s.trim());\n                if (time.length === 1){\n                    if (time[0] === \"\"){\n                        return;\n                    }\n                    actualTimes.push(parseFloat(time,10));\n                } else if (time.length === 2) {\n                    if (time[1] === \"dnf\" || time[1] === \"dns\" ){\n                        actualTimes.push(999);\n                        return;\n                    }\n                    let cones = parseFloat(time[1],10);\n                    actualTimes.push(parseFloat(time,10) + cones * 2);\n                    return;\n                }\n            });\n            let time = actualTimes.sort((a,b)=>a-b)[0];\n            data[currentClass].push(new Time(clazz,name,time, number));\n        }\n    });\n\n    \n    return data;\n}","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 500,\n    maxWidth: 500,\n    width: 500\n    \n  },\n  height: \"35px\"\n});\n\nfunction createData(name, number, time, clazz) {\n  return { name, number, time, clazz };\n}\n\n\n\nexport function AutoXTable({data, name}) {\n\n    const rows = data.map(row => {\n        return createData(row.name, row.number, row.time, row.clazz)\n    })\n\n    const classes = useStyles();\n    let position = 0;\n\n    return (\n        <React.Fragment>    \n            <TableContainer component={Paper}>\n                <div style={{ overflow: 'auto', height: '350px', borderStyle: \"solid\" }}>\n                    <h2 style={{ marginLeft: \"15px\" }}>{name.toUpperCase()}</h2>\n                    <Table className={classes.table} aria-label=\"simple table\" style={{tableLayout: 'fixed'}}>\n                        <TableHead>\n                            <TableRow>\n                                <TableCell align=\"left\">Position</TableCell>\n                                <TableCell align=\"left\">Number</TableCell>\n                                <TableCell>Name</TableCell>\n                                <TableCell align=\"right\">Time</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {rows.map((row) => {\n                                position++;\n                                return (\n                                <TableRow key={row.name}>\n                                    <TableCell align=\"left\">{position}</TableCell>\n                                    <TableCell align=\"left\">{row.number + \" \" + row.clazz.toUpperCase()}</TableCell>\n                                    <TableCell component=\"th\" scope=\"row\">\n                                        {row.name}\n                                    </TableCell>\n                                    <TableCell align=\"right\">{row.time}</TableCell>\n                                </TableRow>\n                            )})}\n                        </TableBody>\n                    </Table>\n                </div>\n            </TableContainer>\n        </React.Fragment>\n    );\n}\n","import React, {useState, useEffect}  from 'react';\nimport {getTiming} from './service/service';\nimport {AutoXTable} from './table';\nimport './App.css';\nimport { Time } from './service/time';\n\nconst paxMap = {ss:.822,as:.819,bs:.814,cs:.809,ds:.806,es:.794,fs:.803,gs:.792,hs:.78,hcs:.792,ssr:.843,\"xs-a\":.844,\"xs-b\":.864,ev:.824,ssp:.853,asp:.849,bsp:.852,csp:.865,dsp:.842,esp:.839,fsf:.823,sts:.812,stx:.816,str:.827,stu:.828,sth:.813,ssc:.801,smf:.841,sm:.854,ssm:.875,xp:.88,bp:.867,cp:.851,dp:.866,ep:.85,fp:.868,hcr:.815,am:1,bm:.962,cm:.893,dm:.895,em:.896,fm:.911,fsae:.963,km:.93,ja:.855,jb:.82,jc:.718,camc:.818,camt:.817,cams:.833,}\n\nconst getRaw = (results) => {\n    const fixNovice = (times) => {\n        return times.map(time=>{\n            let runTime = time.time\n            if (runTime!== 999){\n                let clazz = time.clazz.substring(1);\n                runTime = (time.time / paxMap[clazz]).toFixed(3);\n            }\n            \n            return new Time(time.clazz,time.name,runTime,time.number);\n        })\n    }\n\n    let raw = [];\n    Object.keys(results).forEach(clazz => {\n        if (clazz === 'n'){\n            raw = raw.concat(fixNovice(results[clazz]));\n        } else {\n            raw = raw.concat(results[clazz]);\n        }\n        \n    })\n    raw.sort((a,b)=> {\n        return a.time-b.time;\n    })\n    \n    return raw\n}\n\nconst getPax = (results) => {\n    const fixNovice = (times) => {\n        return times.map(time=>{\n            return new Time(time.clazz,time.name,time.time,time.number);\n        })\n    }\n\n    const applyPax = (times, clazz) => {\n        return times.map(time=>{\n            return new Time(time.clazz,time.name,(time.time*paxMap[clazz]).toFixed(3),time.number);\n        })\n    }\n\n    let raw = [];\n    Object.keys(results).forEach(clazz => {\n        if (clazz === 'n'){\n            raw = raw.concat(fixNovice(results[clazz]));\n        } else {\n            raw = raw.concat(applyPax(results[clazz],clazz));\n        }\n        \n    })\n    raw.sort((a,b)=> {\n        return a.time-b.time;\n    })\n    \n    return raw\n}\n\nexport const LiveTiming = (props) =>{\n    const [data, setData] = useState();\n    const getData = async (promise) => {\n        return await promise;\n    }\n\n    useEffect(() => {\n        async function fetchData() {\n            let results = await getData(getTiming(\"https://api.allorigins.win/get?url=stcsolo.com/live/results_live.htm\"));\n            let raw = getRaw(results)\n            let pax = getPax(results)\n            results['RAW'] = raw;\n            results['PAX'] = pax;\n            setData(results);\n        }\n        fetchData();\n    },[]);\n\n    return (\n        <React.Fragment>\n            <div class=\"flex-grid\">\n                {data && <AutoXTable class=\"col\" data={data[\"PAX\"]} name={\"PAX\"}/>}\n                {data && <AutoXTable class=\"col\" data={data[\"RAW\"]} name={\"RAW\"}/>}\n                {data && Object.keys(data).map(className => {\n                    if (className === \"RAW\" || className === \"PAX\") {\n                        return null\n                    };\n                    return (\n                        <AutoXTable class=\"col\" data={data[className]} name={className}/>\n                    )\n                })}\n            </div>\n        </React.Fragment>\n    )\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {LiveTiming} from './LiveTiming';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <LiveTiming />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}