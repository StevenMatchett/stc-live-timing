{"version":3,"sources":["service/time.js","service/service.js","context/context.js","table.js","DriverTable.js","Modal.js","dropdown.js","LiveTiming.js","serviceWorker.js","index.js","context/reducer.js"],"names":["Time","clazz","name","time","number","rawTimes","car","this","parseTime","parseFloat","isNaN","axios","require","getTiming","url","a","get","res","parser","DOMParser","doc","parseFromString","data","contents","currentClass","querySelectorAll","forEach","tr","querySelector","innerText","times","Array","prototype","slice","call","length","actualTimes","timeHtml","split","map","s","trim","push","cones","bestTime","sort","b","StateContext","createContext","StateProvider","initialState","children","reducer","Provider","value","useReducer","useStateValue","useContext","useStyles","makeStyles","table","minWidth","height","AutoXTable","props","dispatch","rows","row","classes","position","Fragment","TableContainer","component","Paper","Table","className","aria-label","TableHead","TableRow","TableCell","style","width","align","TableBody","key","toUpperCase","onClick","type","scope","color","cursor","maxWidth","DriverTable","selected","overflow","marginLeft","tableLayout","getModalStyle","top","left","transform","theme","paper","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","DriverModal","React","useState","modalStyle","Modal","aria-labelledby","aria-describedby","open","onClose","formControl","margin","selectEmpty","marginTop","Dropdown","clazzes","dropdown","FormControl","InputLabel","Select","onChange","window","history","pushState","location","pathname","target","cl","MenuItem","paxMap","ss","as","bs","cs","ds","es","fs","gs","hs","hcs","ssr","ev","ssp","asp","bsp","csp","dsp","esp","fsf","sts","stx","str","stu","sth","ssc","smf","sm","ssm","xp","bp","cp","dp","ep","fp","hcr","am","bm","cm","dm","em","fm","fsae","km","ja","jb","jc","camc","camt","cams","getRaw","results","raw","Object","keys","concat","runTime","substring","toFixed","getPax","applyPax","LiveTiming","setData","setClasses","getData","promise","useEffect","Date","getTime","pax","classList","fetchData","onpopstate","e","search","includes","val","replace","checkurl","class","Boolean","hostname","match","ReactDOM","render","StrictMode","state","action","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oPAAaA,EAAb,WASI,WAAYC,EAAOC,EAAMC,EAAMC,EAAQC,EAAUC,GAAK,oBAClDC,KAAKN,MAAQA,EACbM,KAAKL,KAAOA,EACZK,KAAKJ,KAAOI,KAAKC,UAAUL,GAC3BI,KAAKH,OAASA,EACdG,KAAKF,SAAWA,EAChBE,KAAKD,IAAMA,EAfnB,sDACcH,GAEN,OADAA,EAAOM,WAAWN,EAAK,IACnBO,MAAMP,GACC,IAEAA,MANnB,KCCMQ,EAAQC,EAAQ,IAGTC,EAAS,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,sEACLJ,EAAMK,IAAIF,GADL,cACjBG,EADiB,OAGjBC,EAAS,IAAIC,UACbC,EAAMF,EAAOG,gBAAgBJ,EAAIK,KAAKC,SAAU,aAChDD,EAAO,GACPE,EAAe,GACnBJ,EAAIK,iBAAiB,8CAA8CC,SAAQ,SAAAC,GACvE,GAAIA,EAAGC,cAAc,MACjBJ,EAAeG,EAAGC,cAAc,KAAK1B,KACrCoB,EAAKE,GAAgB,OAClB,CACH,IAAIvB,EAAQ0B,EAAGC,cAAc,mBAAmBC,UAC5CzB,EAASuB,EAAGC,cAAc,mBAAmBC,UAC7C3B,EAAOyB,EAAGC,cAAc,mBAAmBC,UAC3CvB,EAAMqB,EAAGC,cAAc,mBAAmBC,UAC1CC,EAAQC,MAAMC,UAAUC,MAAMC,KAAKP,EAAGF,iBAAiB,sBAC3DK,EAAQA,EAAMG,MAAM,EAAEH,EAAMK,OAAO,GAEnC,IAAIC,EAAc,GACd/B,EAAW,GACfyB,EAAMJ,SAAQ,SAAAW,GACV,IAAIlC,EAAOkC,EAASR,UAAUS,MAAM,KAAKC,KAAI,SAAAC,GAAC,OAAEA,EAAEC,UAElD,GADApC,EAASqC,KAAKL,EAASR,UAAUY,QACb,IAAhBtC,EAAKgC,OAAa,CAClB,GAAgB,KAAZhC,EAAK,GACL,OAEJiC,EAAYM,KAAKjC,WAAWN,EAAK,UAC9B,GAAoB,IAAhBA,EAAKgC,OAAc,CAC1B,GAAgB,QAAZhC,EAAK,IAA4B,QAAZA,EAAK,GAE1B,YADAiC,EAAYM,KAAK,KAGrB,IAAIC,EAAQlC,WAAWN,EAAK,GAAG,IAE/B,YADAiC,EAAYM,KAAKjC,WAAWN,EAAK,IAAc,EAARwC,OAI/C,IAAIC,EAAWR,EAAYS,MAAK,SAAC9B,EAAE+B,GAAH,OAAO/B,EAAE+B,KAAG,GAC5CxB,EAAKE,GAAckB,KAAK,IAAI1C,EAAKC,EAAMC,EAAK0C,EAAUxC,EAAQC,EAAUC,QAxC3D,kBA6CdgB,GA7Cc,2CAAH,sD,wECHTyB,EAAeC,0BAGfC,EAAgB,SAAC,GAAD,IAAEC,EAAF,EAAEA,aAAcC,EAAhB,EAAgBA,SAAUC,EAA1B,EAA0BA,QAA1B,OAC3B,kBAACL,EAAaM,SAAd,CAAuBC,MAAOC,qBAAWH,EAASF,IAC/CC,IAGQK,EAAgB,kBAAMC,qBAAWV,ICExCW,EAAYC,YAAW,CACzBC,MAAO,CACLC,SAAU,KAEZC,OAAQ,SAOL,SAASC,EAAWC,GAAQ,IACvB1C,EAAS0C,EAAT1C,KADsB,EAETkC,IAAZS,EAFqB,oBAGxBC,EAAO5C,EAAKiB,KAAI,SAAA4B,GAClB,OARYjE,EAQMiE,EAAIjE,KARJE,EAQU+D,EAAI/D,OARND,EAQcgE,EAAIhE,KARZF,EAQkBkE,EAAIlE,MARfI,EAQsB8D,EAAI9D,SARhBC,EAQ0B6D,EAAI7D,IAP9E,CAAEJ,OAAME,SAAQD,OAAMF,QAAOI,WAAUC,OADhD,IAAoBJ,EAAME,EAAQD,EAAMF,EAAOI,EAAUC,KAW/C8D,EAAUV,IACZW,EAAW,EAEf,OACI,kBAAC,IAAMC,SAAP,KACI,kBAACC,EAAA,EAAD,CAAgBC,UAAWC,KACvB,6BACI,kBAACC,EAAA,EAAD,CAAOC,UAAWP,EAAQR,MAAOgB,aAAW,gBACxC,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAWC,MAAO,CAAEC,MAAO,IAAMC,MAAM,QAAvC,YACA,kBAACH,EAAA,EAAD,CAAWG,MAAM,QAAjB,UACA,kBAACH,EAAA,EAAD,aACA,kBAACA,EAAA,EAAD,CAAWG,MAAM,QAAjB,QACA,kBAACH,EAAA,EAAD,CAAWG,MAAM,QAAjB,KACA,kBAACH,EAAA,EAAD,CAAWG,MAAM,QAAjB,KACA,kBAACH,EAAA,EAAD,CAAWG,MAAM,QAAjB,KACA,kBAACH,EAAA,EAAD,CAAWG,MAAM,QAAjB,KACA,kBAACH,EAAA,EAAD,CAAWG,MAAM,QAAjB,KACA,kBAACH,EAAA,EAAD,CAAWG,MAAM,QAAjB,OAGR,kBAACC,EAAA,EAAD,KACKjB,EAAK3B,KAAI,SAAC4B,GAEP,OADAE,IAEA,kBAACS,EAAA,EAAD,CAAUM,IAAKjB,EAAIjE,MACf,kBAAC6E,EAAA,EAAD,CAAWG,MAAM,QAAQb,GACzB,kBAACU,EAAA,EAAD,CAAWG,MAAM,QAAQf,EAAI/D,OAAS,IAAM+D,EAAIlE,MAAMoF,eACtD,kBAACN,EAAA,EAAD,CAAWO,QAAS,kBAAIrB,EAAS,CAACsB,KAAM,kBAAmBjE,KAAM6C,KAAOK,UAAU,KAAKgB,MAAM,OACzF,yBAAKR,MAAO,CAACS,MAAM,OAAQC,OAAQ,YAAavB,EAAIjE,OAExD,kBAAC6E,EAAA,EAAD,CAAWG,MAAM,QAAQf,EAAIhE,MAE7B,kBAAC4E,EAAA,EAAD,CAAWG,MAAM,QAAQf,EAAI9D,SAAS8B,OAAS,EAAIgC,EAAI9D,SAAS,GAAK,IACrE,kBAAC0E,EAAA,EAAD,CAAWG,MAAM,QAAQf,EAAI9D,SAAS8B,OAAS,EAAIgC,EAAI9D,SAAS,GAAK,IACrE,kBAAC0E,EAAA,EAAD,CAAWG,MAAM,QAAQf,EAAI9D,SAAS8B,OAAS,EAAIgC,EAAI9D,SAAS,GAAK,IACrE,kBAAC0E,EAAA,EAAD,CAAWG,MAAM,QAAQf,EAAI9D,SAAS8B,OAAS,EAAIgC,EAAI9D,SAAS,GAAK,IACrE,kBAAC0E,EAAA,EAAD,CAAWG,MAAM,QAAQf,EAAI9D,SAAS8B,OAAS,EAAIgC,EAAI9D,SAAS,GAAK,IACrE,kBAAC0E,EAAA,EAAD,CAAWG,MAAM,QAAQf,EAAI9D,SAAS8B,OAAS,EAAIgC,EAAI9D,SAAS,GAAK,a,oBCzDnGqD,EAAYC,YAAW,CAC3BC,MAAO,CACLC,SAAU,IACV8B,SAAU,IACVV,MAAO,OAMJ,SAASW,EAAY5B,GACxB,IAAMI,EAAUV,IADe,EAERF,IAAfqC,EAFuB,oBAEvBA,SACD5F,EAA8B4F,EAA9B5F,MAAOC,EAAuB2F,EAAvB3F,KAAMG,EAAiBwF,EAAjBxF,SAAUC,EAAOuF,EAAPvF,IAC1B+D,EAAW,EAEf,OACI,kBAAC,IAAMC,SAAP,KACI,kBAACC,EAAA,EAAD,CAAgBC,UAAWC,KACvB,yBAAKO,MAAO,CAAEc,SAAU,SACpB,wBAAId,MAAO,CAAEe,WAAY,SAAW7F,EAApC,KAA4CD,EAAMoF,cAAlD,KACA,wBAAIL,MAAO,CAAEe,WAAY,SAAWzF,GACpC,kBAACoE,EAAA,EAAD,CAAOC,UAAWP,EAAQR,MAAOgB,aAAW,eAAeI,MAAO,CAACgB,YAAa,UAC5E,kBAACnB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAWG,MAAM,QAAjB,OACA,kBAACH,EAAA,EAAD,CAAWG,MAAM,QAAjB,UAGR,kBAACC,EAAA,EAAD,KACK9E,EAASkC,KAAI,SAAC4B,GAEX,OADAE,IAEA,kBAACS,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAWG,MAAM,QAAQb,GACzB,kBAACU,EAAA,EAAD,CAAWG,MAAM,QAAQf,YCzC7D,SAAS8B,IAIP,MAAO,CACLC,IAAI,GAAD,OAJO,GAIP,KACHC,KAAK,GAAD,OAJO,GAIP,KACJC,UAAU,cAAD,OANC,GAMD,eALE,GAKF,OAIb,IAAM1C,EAAYC,aAAW,SAAA0C,GAAK,MAAK,CACrCC,MAAO,CACLjC,SAAU,WACVY,MAAO,IACPsB,gBAAiBF,EAAMG,QAAQC,WAAWH,MAC1CI,OAAQ,iBACRC,UAAWN,EAAMO,QAAQ,GACzBC,QAASR,EAAMS,QAAQ,EAAG,EAAG,QAIpBC,EAAc,WAAO,IAAD,EACEvD,IADF,mBACrBqC,EADqB,KACrBA,SAAW5B,EADU,KAEvBG,EAAUV,IAFa,EAGRsD,IAAMC,SAAShB,GAA7BiB,EAHsB,oBAK7B,OAAKrB,EAKL,6BACI,kBAACsB,EAAA,EAAD,CACAC,kBAAgB,qBAChBC,mBAAiB,2BACjBC,OAAOzB,EACP0B,QAAS,kBAAItD,EAAS,CAAEsB,KAAM,sBAC1B,yBAAKP,MAAOkC,EAAYvC,UAAWP,EAAQkC,OACvC,kBAACV,EAAD,SAXD,+B,oCCzBTlC,EAAYC,aAAW,SAAC0C,GAAD,MAAY,CACvCmB,YAAa,CACXC,OAAQpB,EAAMS,QAAQ,GACtBjD,SAAU,KAEZ6D,YAAa,CACXC,UAAWtB,EAAMS,QAAQ,QAIhBc,EAAW,SAAC,GAAe,IAAdC,EAAa,EAAbA,QAClBzD,EAAUV,IADqB,EAENF,IAFM,mBAE7BsE,EAF6B,KAE7BA,SAAW7D,EAFkB,KAMrC,OACI,kBAAC8D,EAAA,EAAD,CAAapD,UAAWP,EAAQoD,aAC9B,kBAACQ,EAAA,EAAD,cACA,kBAACC,EAAA,EAAD,CAAQ3E,MAAOwE,EAAUI,SAAU,SAAC5G,GAChC6G,OAAOC,QAAQC,UAAU,GAAI,GAA7B,UAAoCF,OAAOG,SAASC,SAApD,kBAAsEjH,EAAKkH,OAAOlF,QAClFW,EAAS,CAACsB,KAAK,kBAAmBjE,KAAKA,EAAKkH,OAAOlF,UAElDuE,EAAQtF,KAAI,SAAAkG,GACT,OAAO,kBAACC,EAAA,EAAD,CAAUpF,MAAOmF,GAAKA,EAAGpD,qBCvB1CsD,EAAS,CAACC,GAAG,KAAKC,GAAG,KAAKC,GAAG,KAAKC,GAAG,KAAKC,GAAG,KAAKC,GAAG,KAAKC,GAAG,KAAKC,GAAG,KAAKC,GAAG,IAAIC,IAAI,KAAKC,IAAI,KAAK,OAAO,KAAK,OAAO,KAAKC,GAAG,KAAKC,IAAI,KAAKC,IAAI,KAAKC,IAAI,KAAKC,IAAI,KAAKC,IAAI,KAAKC,IAAI,KAAKC,IAAI,KAAKC,IAAI,KAAKC,IAAI,KAAKC,IAAI,KAAKC,IAAI,KAAKC,IAAI,KAAKC,IAAI,KAAKC,IAAI,KAAKC,GAAG,KAAKC,IAAI,KAAKC,GAAG,IAAIC,GAAG,KAAKC,GAAG,KAAKC,GAAG,KAAKC,GAAG,IAAIC,GAAG,KAAKC,IAAI,KAAKC,GAAG,EAAEC,GAAG,KAAKC,GAAG,KAAKC,GAAG,KAAKC,GAAG,KAAKC,GAAG,KAAKC,KAAK,KAAKC,GAAG,IAAIC,GAAG,KAAKC,GAAG,IAAIC,GAAG,KAAKC,KAAK,KAAKC,KAAK,KAAKC,KAAK,MAEvbC,EAAS,SAACC,GACZ,IAYIC,EAAM,GAaV,OAZAC,OAAOC,KAAKH,GAASpK,SAAQ,SAAAzB,GAErB8L,EADU,MAAV9L,EACM8L,EAAIG,OAAiBJ,EAAQ7L,GAd1BsC,KAAI,SAAApC,GACb,IAAIgM,EAAUhM,EAAKA,KACnB,GAAe,MAAXgM,EAAe,CACf,IAAIlM,EAAQE,EAAKF,MAAMmM,UAAU,GACjCD,GAAWhM,EAAKA,KAAOwI,EAAO1I,IAAQoM,QAAQ,GAGlD,OAAO,IAAIrM,EAAKG,EAAKF,MAAME,EAAKD,KAAKiM,EAAQhM,EAAKC,OAAOD,EAAKE,SAAUF,EAAKG,SASvEyL,EAAIG,OAAOJ,EAAQ7L,OAIjC8L,EAAIlJ,MAAK,SAAC9B,EAAE+B,GACR,OAAO/B,EAAEZ,KAAK2C,EAAE3C,QAGb4L,GAGLO,EAAS,SAACR,GACZ,IAYIC,EAAM,GAaV,OAZAC,OAAOC,KAAKH,GAASpK,SAAQ,SAAAzB,GAErB8L,EADU,MAAV9L,EACM8L,EAAIG,OAAiBJ,EAAQ7L,GAd1BsC,KAAI,SAAApC,GACb,OAAO,IAAIH,EAAKG,EAAKF,MAAME,EAAKD,KAAKC,EAAKA,KAAKA,EAAKC,OAAQD,EAAKE,SAAUF,EAAKG,SAe1EyL,EAAIG,OAXD,SAACpK,EAAO7B,GACrB,OAAO6B,EAAMS,KAAI,SAAApC,GACb,OAAO,IAAIH,EAAKG,EAAKF,MAAME,EAAKD,MAAMC,EAAKA,KAAKwI,EAAO1I,IAAQoM,QAAQ,GAAGlM,EAAKC,OAAQD,EAAKE,SAAUF,EAAKG,QAS1FiM,CAAST,EAAQ7L,GAAOA,OAIjD8L,EAAIlJ,MAAK,SAAC9B,EAAE+B,GACR,OAAO/B,EAAEZ,KAAK2C,EAAE3C,QAGb4L,GAGES,EAAa,SAACxI,GAAU,IAAD,EACRiD,qBADQ,mBACzB3F,EADyB,KACnBmL,EADmB,OAEFxF,mBAAS,IAFP,mBAEzB7C,EAFyB,KAEhBsI,EAFgB,KAG1BC,EAAO,uCAAG,WAAOC,GAAP,SAAA7L,EAAA,sEACC6L,EADD,mFAAH,sDAHmB,EAkBDpJ,IAlBC,mBAkBxBsE,EAlBwB,KAkBxBA,SAAW7D,EAlBa,KAwChC,OApBA4I,qBAAU,WAAM,4CACZ,kCAAA9L,EAAA,sEACwB4L,EAAQ9L,EAAU,+EAAgF,IAAIiM,MAAOC,YADrI,OACQjB,EADR,OAEQC,EAAMF,EAAOC,GACbkB,EAAMV,EAAOR,GACjBA,EAAO,IAAUC,EACjBD,EAAO,IAAUkB,EACjBP,EAAQX,GACJmB,EAAYjB,OAAOC,KAAKH,GAC5BmB,EAAS,CAAI,MAAO,OAAX,mBAAqBA,EAAUhL,MAAM,EAAEgL,EAAU9K,OAAO,KACjEuK,EAAWO,GATf,6CADY,uBAAC,WAAD,wBAaZC,KACF,IAGF/E,OAAOgF,WAAa,SAAAC,GAAC,OA9BJ,WACb,GAAIjF,OAAOG,SAAS+E,QAAUlF,OAAOG,SAAS+E,OAAOC,SAAS,WAAW,CACrE,IAAIC,EAAMpF,OAAOG,SAAS+E,OAAOG,QAAQ,UAAU,IAAI/K,OACnD2B,EAAQkJ,SAASC,IACjBtJ,EAAS,CAACsB,KAAK,kBAAmBjE,KAAKiM,SAG3CtJ,EAAS,CAACsB,KAAK,kBAAmBjE,KAAM,QAuBvBmM,IAIrB,kBAAC,IAAMnJ,SAAP,KACKhD,GAAQ8C,GACL,6BACI,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAUyD,QAASzD,IACnB,kBAACL,EAAD,CAAY2J,MAAM,MAAMpM,KAAMA,EAAKwG,GAAW5H,KAAM4H,OCvGpD6F,QACW,cAA7BxF,OAAOG,SAASsF,UAEe,UAA7BzF,OAAOG,SAASsF,UAEhBzF,OAAOG,SAASsF,SAASC,MACvB,2D,YCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,CAAe9K,aAAc,CAAC2C,SAAS,KAAMiC,SAAU,OAAQ1E,QCV5C,SAAC6K,EAAOC,GAC7B,OAAQA,EAAO3I,MACb,IAAK,kBACD,OAAO,eAAI0I,EAAX,CAAkBpI,SAAUqI,EAAO5M,OACvC,IAAK,kBACD,OAAO,eAAI2M,EAAX,CAAkBpI,SAAU,OAChC,IAAK,kBACD,OAAO,eAAIoI,EAAX,CAAkBnG,SAAUoG,EAAO5M,OACvC,QACI,OAAO2M,KDET,kBAAC,EAAD,QAGJE,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.7188b11d.chunk.js","sourcesContent":["export class Time{\n    parseTime(time){\n        time = parseFloat(time,10);\n        if (isNaN(time)){\n            return 999;\n        } else {\n            return time;\n        }\n    }\n    constructor(clazz, name, time, number, rawTimes, car){\n        this.clazz = clazz;\n        this.name = name;\n        this.time = this.parseTime(time);\n        this.number = number;\n        this.rawTimes = rawTimes;\n        this.car = car;\n    }\n}","import {Time} from './time';\nconst axios = require('axios');\n\n\nexport const getTiming = async (url) => {\n    let res = await axios.get(url);\n\n    let parser = new DOMParser();\n    let doc = parser.parseFromString(res.data.contents, \"text/html\");\n    let data = {};\n    let currentClass = \"\";\n    doc.querySelectorAll(\"body > a > table:nth-child(4) > tbody > tr\").forEach(tr=> {\n        if (tr.querySelector(\"th\")){\n            currentClass = tr.querySelector(\"a\").name;\n            data[currentClass] = []\n        } else {\n            let clazz = tr.querySelector(\"td:nth-child(2)\").innerText;\n            let number = tr.querySelector(\"td:nth-child(3)\").innerText;\n            let name = tr.querySelector(\"td:nth-child(4)\").innerText;\n            let car = tr.querySelector(\"td:nth-child(5)\").innerText;\n            let times = Array.prototype.slice.call(tr.querySelectorAll(\"td:nth-child(n+7)\"));\n            times = times.slice(0,times.length-2);\n\n            let actualTimes = [];\n            let rawTimes = [];\n            times.forEach(timeHtml => {\n                let time = timeHtml.innerText.split(\"+\").map(s=>s.trim());\n                rawTimes.push(timeHtml.innerText.trim());\n                if (time.length === 1){\n                    if (time[0] === \"\"){\n                        return;\n                    }\n                    actualTimes.push(parseFloat(time,10));\n                } else if (time.length === 2) {\n                    if (time[1] === \"dnf\" || time[1] === \"dns\" ){\n                        actualTimes.push(999);\n                        return;\n                    }\n                    let cones = parseFloat(time[1],10);\n                    actualTimes.push(parseFloat(time,10) + cones * 2);\n                    return;\n                }\n            });\n            let bestTime = actualTimes.sort((a,b)=>a-b)[0];\n            data[currentClass].push(new Time(clazz,name,bestTime, number, rawTimes, car));\n        }\n    });\n\n    \n    return data;\n}","import React, {createContext, useContext, useReducer} from 'react';\nexport const StateContext = createContext();\n\n\nexport const StateProvider = ({initialState, children, reducer}) =>(\n  <StateContext.Provider value={useReducer(reducer, initialState)}>\n    {children}\n  </StateContext.Provider>\n);\nexport const useStateValue = () => useContext(StateContext);\n\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { useStateValue } from './context/context';\n\nconst useStyles = makeStyles({\n    table: {\n      minWidth: 500, \n    },\n    height: \"35px\"\n  });\n\nfunction createData(name, number, time, clazz, rawTimes, car) {\n  return { name, number, time, clazz, rawTimes, car};\n}\n\nexport function AutoXTable(props) {\n    const { data } = props\n    const [, dispatch] = useStateValue();\n    const rows = data.map(row => {\n        return createData(row.name, row.number, row.time, row.clazz, row.rawTimes, row.car)\n    })\n\n    const classes = useStyles();\n    let position = 0;\n\n    return (\n        <React.Fragment>    \n            <TableContainer component={Paper}>\n                <div>\n                    <Table className={classes.table} aria-label=\"simple table\" >\n                        <TableHead>\n                            <TableRow>\n                                <TableCell style={{ width: 25 }} align=\"left\">Position</TableCell>\n                                <TableCell align=\"left\">Number</TableCell>\n                                <TableCell>Name</TableCell>\n                                <TableCell align=\"left\">Best</TableCell>\n                                <TableCell align=\"left\">1</TableCell>\n                                <TableCell align=\"left\">2</TableCell>\n                                <TableCell align=\"left\">3</TableCell>\n                                <TableCell align=\"left\">4</TableCell>\n                                <TableCell align=\"left\">5</TableCell>\n                                <TableCell align=\"left\">6</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {rows.map((row) => {\n                                position++;\n                                return (\n                                <TableRow key={row.name}>\n                                    <TableCell align=\"left\">{position}</TableCell>\n                                    <TableCell align=\"left\">{row.number + \" \" + row.clazz.toUpperCase()}</TableCell>\n                                    <TableCell onClick={()=>dispatch({type: \"SELECTED_DRIVER\", data: row})} component=\"th\" scope=\"row\">\n                                        <div style={{color:\"blue\", cursor: \"pointer\"}}>{row.name}</div>\n                                    </TableCell>\n                                    <TableCell align=\"left\">{row.time}</TableCell>\n\n                                    <TableCell align=\"left\">{row.rawTimes.length > 0 ? row.rawTimes[0] : \"\"}</TableCell>\n                                    <TableCell align=\"left\">{row.rawTimes.length > 1 ? row.rawTimes[1] : \"\"}</TableCell>\n                                    <TableCell align=\"left\">{row.rawTimes.length > 2 ? row.rawTimes[2] : \"\"}</TableCell>\n                                    <TableCell align=\"left\">{row.rawTimes.length > 3 ? row.rawTimes[3] : \"\"}</TableCell>\n                                    <TableCell align=\"left\">{row.rawTimes.length > 4 ? row.rawTimes[4] : \"\"}</TableCell>\n                                    <TableCell align=\"left\">{row.rawTimes.length > 5 ? row.rawTimes[5] : \"\"}</TableCell>\n\n                                    \n                                </TableRow>\n                            )})}\n                        </TableBody>\n                    </Table>\n                </div>\n            </TableContainer>\n        </React.Fragment>\n    );\n}\n","import React from 'react';\nimport { useStateValue } from './context/context'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 500,\n    maxWidth: 500,\n    width: 500\n  },\n\n});\n\n\nexport function DriverTable(props) {\n    const classes = useStyles();\n    const [{selected}, ] = useStateValue()\n    const {clazz, name, rawTimes, car} = selected;\n    let position = 0;\n\n    return (\n        <React.Fragment>    \n            <TableContainer component={Paper}>\n                <div style={{ overflow: 'auto'}}>\n                    <h2 style={{ marginLeft: \"15px\" }}>{name} ({clazz.toUpperCase()})</h2>\n                    <h4 style={{ marginLeft: \"15px\" }}>{car}</h4>\n                    <Table className={classes.table} aria-label=\"simple table\" style={{tableLayout: 'fixed'}}>\n                        <TableHead>\n                            <TableRow>\n                                <TableCell align=\"left\">Run</TableCell>\n                                <TableCell align=\"left\">Time</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {rawTimes.map((row) => {\n                                position++;\n                                return (\n                                <TableRow>\n                                    <TableCell align=\"left\">{position}</TableCell>\n                                    <TableCell align=\"left\">{row}</TableCell>\n                                </TableRow>\n                            )})}\n                        </TableBody>\n                    </Table>\n                </div>\n            </TableContainer>\n        </React.Fragment>\n    );\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Modal from '@material-ui/core/Modal';\nimport {DriverTable} from './DriverTable';\nimport { useStateValue } from './context/context';\nfunction getModalStyle() {\n  const top = 50;\n  const left = 50;\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\n\nconst useStyles = makeStyles(theme => ({\n  paper: {\n    position: 'absolute',\n    width: 400,\n    backgroundColor: theme.palette.background.paper,\n    border: '2px solid #000',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n\nexport const DriverModal = () => {\n    const [{selected}, dispatch] = useStateValue()\n    const classes = useStyles();\n    const [modalStyle] = React.useState(getModalStyle);\n\n    if (!selected){\n        return <div/>;\n    }\n    \n    return (\n    <div>\n        <Modal\n        aria-labelledby=\"simple-modal-title\"\n        aria-describedby=\"simple-modal-description\"\n        open={ selected ? true : false }\n        onClose={()=>dispatch({ type: 'DESELECT_DRIVER'})}>\n            <div style={modalStyle} className={classes.paper}>\n                <DriverTable />\n            </div>\n        </Modal>\n    </div>\n    );\n    }","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport { useStateValue } from './context/context'\n\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n}));\n\nexport const Dropdown = ({clazzes}) => {\n  const classes = useStyles();\n  const [{dropdown}, dispatch] = useStateValue();\n\n\n\n  return (\n      <FormControl className={classes.formControl}>\n        <InputLabel>Class</InputLabel>\n        <Select value={dropdown} onChange={(data)=>{\n            window.history.pushState(\"\", \"\", `${window.location.pathname}?class=${data.target.value}` );\n            dispatch({type:\"UPDATE_DROPDOWN\", data:data.target.value\n          })}}>\n            {clazzes.map(cl => {\n                return <MenuItem value={cl}>{cl.toUpperCase()}</MenuItem>\n            })}\n        </Select>\n      </FormControl>\n  );\n};","import React, {useState, useEffect}  from 'react';\nimport {getTiming} from './service/service';\nimport {AutoXTable} from './table';\nimport './App.css';\nimport { Time } from './service/time';\nimport { DriverModal } from './Modal';\nimport { Dropdown } from './dropdown';\nimport { useStateValue } from './context/context'\n\nconst paxMap = {ss:.822,as:.819,bs:.814,cs:.809,ds:.806,es:.794,fs:.803,gs:.792,hs:.78,hcs:.792,ssr:.843,\"xs-a\":.844,\"xs-b\":.864,ev:.824,ssp:.853,asp:.849,bsp:.852,csp:.865,dsp:.842,esp:.839,fsf:.823,sts:.812,stx:.816,str:.827,stu:.828,sth:.813,ssc:.801,smf:.841,sm:.854,ssm:.875,xp:.88,bp:.867,cp:.851,dp:.866,ep:.85,fp:.868,hcr:.815,am:1,bm:.962,cm:.893,dm:.895,em:.896,fm:.911,fsae:.963,km:.93,ja:.855,jb:.82,jc:.718,camc:.818,camt:.817,cams:.833,}\n\nconst getRaw = (results) => {\n    const fixNovice = (times) => {\n        return times.map(time=>{\n            let runTime = time.time\n            if (runTime!== 999){\n                let clazz = time.clazz.substring(1);\n                runTime = (time.time / paxMap[clazz]).toFixed(3);\n            }\n            \n            return new Time(time.clazz,time.name,runTime,time.number,time.rawTimes, time.car);\n        })\n    }\n\n    let raw = [];\n    Object.keys(results).forEach(clazz => {\n        if (clazz === 'n'){\n            raw = raw.concat(fixNovice(results[clazz]));\n        } else {\n            raw = raw.concat(results[clazz]);\n        }\n        \n    })\n    raw.sort((a,b)=> {\n        return a.time-b.time;\n    })\n    \n    return raw\n}\n\nconst getPax = (results) => {\n    const fixNovice = (times) => {\n        return times.map(time=>{\n            return new Time(time.clazz,time.name,time.time,time.number, time.rawTimes, time.car);\n        })\n    }\n\n    const applyPax = (times, clazz) => {\n        return times.map(time=>{\n            return new Time(time.clazz,time.name,(time.time*paxMap[clazz]).toFixed(3),time.number, time.rawTimes, time.car);\n        })\n    }\n\n    let raw = [];\n    Object.keys(results).forEach(clazz => {\n        if (clazz === 'n'){\n            raw = raw.concat(fixNovice(results[clazz]));\n        } else {\n            raw = raw.concat(applyPax(results[clazz],clazz));\n        }\n        \n    })\n    raw.sort((a,b)=> {\n        return a.time-b.time;\n    })\n    \n    return raw\n}\n\nexport const LiveTiming = (props) =>{\n    const [data, setData] = useState();\n    const [classes, setClasses] = useState(\"\");\n    const getData = async (promise) => {\n        return await promise;\n    }\n\n    const checkurl = () => {\n        if (window.location.search && window.location.search.includes(\"?class=\")){\n            let val = window.location.search.replace(\"?class=\",\"\").trim();\n            if (classes.includes(val)){\n                dispatch({type:\"UPDATE_DROPDOWN\", data:val})\n            }\n        } else {\n            dispatch({type:\"UPDATE_DROPDOWN\", data: \"PAX\"})\n        }\n    }\n\n    const [{dropdown}, dispatch] = useStateValue();\n\n    useEffect(() => {\n        async function fetchData() {\n            let results = await getData(getTiming(\"https://api.allorigins.win/get?url=stcsolo.com/live/results_live.htm?cache=\" + new Date().getTime()));\n            let raw = getRaw(results)\n            let pax = getPax(results)\n            results['RAW'] = raw;\n            results['PAX'] = pax;\n            setData(results);\n            let classList = Object.keys(results);\n            classList = [\"PAX\", \"RAW\", ...classList.slice(0,classList.length-2)]\n            setClasses(classList)\n            \n        }\n        fetchData();\n    },[]);\n\n    \n    window.onpopstate = e => checkurl();\n    \n\n    return (\n        <React.Fragment>\n            {data && classes && \n                <div>\n                    <DriverModal />\n                    <Dropdown clazzes={classes} />\n                    <AutoXTable class=\"col\" data={data[dropdown]} name={dropdown} />\n                </div>\n            }\n         \n\n\n        </React.Fragment>\n    )\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {LiveTiming} from './LiveTiming';\nimport * as serviceWorker from './serviceWorker';\nimport { StateProvider } from './context/context'\nimport { reducer } from './context/reducer'\n\nReactDOM.render(\n  <React.StrictMode>\n    <StateProvider initialState={{selected:null, dropdown: \"PAX\"}} reducer={reducer} >\n      <LiveTiming />\n    </StateProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const reducer = (state, action) => {\n  switch (action.type) {\n    case 'SELECTED_DRIVER':\n        return {...state, selected: action.data };\n    case 'DESELECT_DRIVER':\n        return {...state, selected: null };\n    case 'UPDATE_DROPDOWN':\n        return {...state, dropdown: action.data }\n    default:\n        return state;\n  }\n};"],"sourceRoot":""}