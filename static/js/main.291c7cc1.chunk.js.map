{"version":3,"sources":["service/time.js","service/service.js","context/context.js","table.js","DriverTable.js","Modal.js","context/reducer.js","LiveTiming.js","serviceWorker.js","index.js"],"names":["Time","clazz","name","time","number","rawTimes","this","parseTime","parseFloat","isNaN","axios","require","getTiming","url","a","get","res","parser","DOMParser","doc","parseFromString","data","contents","currentClass","querySelectorAll","forEach","tr","querySelector","innerText","times","Array","prototype","slice","call","length","actualTimes","timeHtml","split","map","s","trim","push","cones","bestTime","sort","b","StateContext","createContext","StateProvider","initialState","children","reducer","Provider","value","useReducer","useStateValue","useContext","useStyles","makeStyles","table","minWidth","maxWidth","width","height","AutoXTable","props","dispatch","rows","row","createData","classes","position","Fragment","TableContainer","component","Paper","style","overflow","borderStyle","marginLeft","toUpperCase","Table","className","aria-label","tableLayout","TableHead","TableRow","TableCell","align","TableBody","key","onClick","type","scope","color","cursor","DriverTable","selected","getModalStyle","top","left","transform","theme","paper","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","DriverModal","React","useState","modalStyle","Modal","aria-labelledby","aria-describedby","open","onClose","state","action","paxMap","ss","as","bs","cs","ds","es","fs","gs","hs","hcs","ssr","ev","ssp","asp","bsp","csp","dsp","esp","fsf","sts","stx","str","stu","sth","ssc","smf","sm","ssm","xp","bp","cp","dp","ep","fp","hcr","am","bm","cm","dm","em","fm","fsae","km","ja","jb","jc","camc","camt","cams","getRaw","results","raw","Object","keys","concat","runTime","substring","toFixed","getPax","applyPax","LiveTiming","setData","getData","promise","useEffect","Date","getTime","pax","fetchData","class","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mSAAaA,EAAb,WASI,WAAYC,EAAOC,EAAMC,EAAMC,EAAQC,GAAU,oBAC7CC,KAAKL,MAAQA,EACbK,KAAKJ,KAAOA,EACZI,KAAKH,KAAOG,KAAKC,UAAUJ,GAC3BG,KAAKF,OAASA,EACdE,KAAKD,SAAWA,EAdxB,sDACcF,GAEN,OADAA,EAAOK,WAAWL,EAAK,IACnBM,MAAMN,GACC,IAEAA,MANnB,KCCMO,EAAQC,EAAQ,IAGTC,EAAS,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,sEACLJ,EAAMK,IAAIF,GADL,cACjBG,EADiB,OAGjBC,EAAS,IAAIC,UACbC,EAAMF,EAAOG,gBAAgBJ,EAAIK,KAAKC,SAAU,aAChDD,EAAO,GACPE,EAAe,GACnBJ,EAAIK,iBAAiB,8CAA8CC,SAAQ,SAAAC,GACvE,GAAIA,EAAGC,cAAc,MACjBJ,EAAeG,EAAGC,cAAc,KAAKzB,KACrCmB,EAAKE,GAAgB,OAClB,CACH,IAAItB,EAAQyB,EAAGC,cAAc,mBAAmBC,UAC5CxB,EAASsB,EAAGC,cAAc,mBAAmBC,UAC7C1B,EAAOwB,EAAGC,cAAc,mBAAmBC,UAC3CC,EAAQC,MAAMC,UAAUC,MAAMC,KAAKP,EAAGF,iBAAiB,sBAC3DK,EAAQA,EAAMG,MAAM,EAAEH,EAAMK,OAAO,GAEnC,IAAIC,EAAc,GACd9B,EAAW,GACfwB,EAAMJ,SAAQ,SAAAW,GACV,IAAIjC,EAAOiC,EAASR,UAAUS,MAAM,KAAKC,KAAI,SAAAC,GAAC,OAAEA,EAAEC,UAElD,GADAnC,EAASoC,KAAKL,EAASR,UAAUY,QACb,IAAhBrC,EAAK+B,OAAa,CAClB,GAAgB,KAAZ/B,EAAK,GACL,OAEJgC,EAAYM,KAAKjC,WAAWL,EAAK,UAC9B,GAAoB,IAAhBA,EAAK+B,OAAc,CAC1B,GAAgB,QAAZ/B,EAAK,IAA4B,QAAZA,EAAK,GAE1B,YADAgC,EAAYM,KAAK,KAGrB,IAAIC,EAAQlC,WAAWL,EAAK,GAAG,IAE/B,YADAgC,EAAYM,KAAKjC,WAAWL,EAAK,IAAc,EAARuC,OAI/C,IAAIC,EAAWR,EAAYS,MAAK,SAAC9B,EAAE+B,GAAH,OAAO/B,EAAE+B,KAAG,GAC5CxB,EAAKE,GAAckB,KAAK,IAAIzC,EAAKC,EAAMC,EAAKyC,EAAUvC,EAAQC,QAvCjD,kBA4CdgB,GA5Cc,2CAAH,sD,iECHTyB,EAAeC,0BAGfC,EAAgB,SAAC,GAAD,IAAEC,EAAF,EAAEA,aAAcC,EAAhB,EAAgBA,SAAUC,EAA1B,EAA0BA,QAA1B,OAC3B,kBAACL,EAAaM,SAAd,CAAuBC,MAAOC,qBAAWH,EAASF,IAC/CC,IAGQK,EAAgB,kBAAMC,qBAAWV,ICExCW,EAAYC,YAAW,CAC3BC,MAAO,CACLC,SAAU,IACVC,SAAU,IACVC,MAAO,KAGTC,OAAQ,SAOH,SAASC,EAAWC,GAAQ,IACxB5C,EAAc4C,EAAd5C,KAAMnB,EAAQ+D,EAAR/D,KADiB,EAETqD,IAAZW,EAFqB,oBAGxBC,EAAO9C,EAAKiB,KAAI,SAAA8B,GAClB,OARR,SAAoBlE,EAAME,EAAQD,EAAMF,EAAOI,GAC7C,MAAO,CAAEH,OAAME,SAAQD,OAAMF,QAAOI,YAOvBgE,CAAWD,EAAIlE,KAAMkE,EAAIhE,OAAQgE,EAAIjE,KAAMiE,EAAInE,MAAOmE,EAAI/D,aAG/DiE,EAAUb,IACZc,EAAW,EAEf,OACI,kBAAC,IAAMC,SAAP,KACI,kBAACC,EAAA,EAAD,CAAgBC,UAAWC,KACvB,yBAAKC,MAAO,CAAEC,SAAU,OAAQd,OAAQ,QAASe,YAAa,UAC1D,wBAAIF,MAAO,CAAEG,WAAY,SAAW7E,EAAK8E,eACzC,kBAACC,EAAA,EAAD,CAAOC,UAAWZ,EAAQX,MAAOwB,aAAW,eAAeP,MAAO,CAACQ,YAAa,UAC5E,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAWX,MAAO,CAAEd,MAAO,IAAM0B,MAAM,QAAvC,YACA,kBAACD,EAAA,EAAD,CAAWC,MAAM,QAAjB,UACA,kBAACD,EAAA,EAAD,aACA,kBAACA,EAAA,EAAD,CAAWC,MAAM,SAAjB,UAGR,kBAACC,EAAA,EAAD,KACKtB,EAAK7B,KAAI,SAAC8B,GAEP,OADAG,IAEA,kBAACe,EAAA,EAAD,CAAUI,IAAKtB,EAAIlE,MACf,kBAACqF,EAAA,EAAD,CAAWC,MAAM,QAAQjB,GACzB,kBAACgB,EAAA,EAAD,CAAWC,MAAM,QAAQpB,EAAIhE,OAAS,IAAMgE,EAAInE,MAAM+E,eACtD,kBAACO,EAAA,EAAD,CAAWI,QAAS,kBAAIzB,EAAS,CAAC0B,KAAM,kBAAmBvE,KAAM+C,KAAOM,UAAU,KAAKmB,MAAM,OACzF,yBAAKjB,MAAO,CAACkB,MAAM,OAAQC,OAAQ,YAAa3B,EAAIlE,OAExD,kBAACqF,EAAA,EAAD,CAAWC,MAAM,SAASpB,EAAIjE,e,kBChD5DsD,EAAYC,YAAW,CAC3BC,MAAO,CACLC,SAAU,IACVC,SAAU,IACVC,MAAO,OAMJ,SAASkC,EAAY/B,GACxB,IAAMK,EAAUb,IADe,EAERF,IAAf0C,EAFuB,oBAEvBA,SACDhG,EAAyBgG,EAAzBhG,MAAOC,EAAkB+F,EAAlB/F,KAAMG,EAAY4F,EAAZ5F,SAChBkE,EAAW,EAEf,OACI,kBAAC,IAAMC,SAAP,KACI,kBAACC,EAAA,EAAD,CAAgBC,UAAWC,KACvB,yBAAKC,MAAO,CAAEC,SAAU,SACpB,wBAAID,MAAO,CAAEG,WAAY,SAAW7E,EAApC,KAA4CD,EAAM+E,cAAlD,KACA,kBAACC,EAAA,EAAD,CAAOC,UAAWZ,EAAQX,MAAOwB,aAAW,eAAeP,MAAO,CAACQ,YAAa,UAC5E,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAWC,MAAM,QAAjB,OACA,kBAACD,EAAA,EAAD,CAAWC,MAAM,QAAjB,UAGR,kBAACC,EAAA,EAAD,KACKpF,EAASiC,KAAI,SAAC8B,GAEX,OADAG,IAEA,kBAACe,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAWC,MAAM,QAAQjB,GACzB,kBAACgB,EAAA,EAAD,CAAWC,MAAM,QAAQpB,YCxC7D,SAAS8B,IAIP,MAAO,CACLC,IAAI,GAAD,OAJO,GAIP,KACHC,KAAK,GAAD,OAJO,GAIP,KACJC,UAAU,cAAD,OANC,GAMD,eALE,GAKF,OAIb,IAAM5C,EAAYC,aAAW,SAAA4C,GAAK,MAAK,CACrCC,MAAO,CACLhC,SAAU,WACVT,MAAO,IACP0C,gBAAiBF,EAAMG,QAAQC,WAAWH,MAC1CI,OAAQ,iBACRC,UAAWN,EAAMO,QAAQ,GACzBC,QAASR,EAAMS,QAAQ,EAAG,EAAG,QAIpBC,EAAc,WAAO,IAAD,EACEzD,IADF,mBACrB0C,EADqB,KACrBA,SAAW/B,EADU,KAEvBI,EAAUb,IAFa,EAGRwD,IAAMC,SAAShB,GAA7BiB,EAHsB,oBAK7B,OAAKlB,EAKL,6BACI,kBAACmB,EAAA,EAAD,CACAC,kBAAgB,qBAChBC,mBAAiB,2BACjBC,OAAOtB,EACPuB,QAAS,kBAAItD,EAAS,CAAE0B,KAAM,sBAC1B,yBAAKhB,MAAOuC,EAAYjC,UAAWZ,EAAQiC,OACvC,kBAACP,EAAD,SAXD,+BCjCF7C,EAAU,SAACsE,EAAOC,GAC7B,OAAQA,EAAO9B,MACb,IAAK,kBACD,MAAO,CAACK,SAAUyB,EAAOrG,MAC7B,IAAK,kBACD,MAAO,CAAC4E,SAAU,MACtB,QACI,OAAOwvbC,EAAS,SAACC,GACZ,IAYIC,EAAM,GAaV,OAZAC,OAAOC,KAAKH,GAASrJ,SAAQ,SAAAxB,GAErB8K,EADU,MAAV9K,EACM8K,EAAIG,OAAiBJ,EAAQ7K,GAd1BqC,KAAI,SAAAnC,GACb,IAAIgL,EAAUhL,EAAKA,KACnB,GAAe,MAAXgL,EAAe,CACf,IAAIlL,EAAQE,EAAKF,MAAMmL,UAAU,GACjCD,GAAWhL,EAAKA,KAAOwH,EAAO1H,IAAQoL,QAAQ,GAGlD,OAAO,IAAIrL,EAAKG,EAAKF,MAAME,EAAKD,KAAKiL,EAAQhL,EAAKC,OAAOD,EAAKE,cASxD0K,EAAIG,OAAOJ,EAAQ7K,OAIjC8K,EAAInI,MAAK,SAAC9B,EAAE+B,GACR,OAAO/B,EAAEX,KAAK0C,EAAE1C,QAGb4K,GAGLO,EAAS,SAACR,GACZ,IAYIC,EAAM,GAaV,OAZAC,OAAOC,KAAKH,GAASrJ,SAAQ,SAAAxB,GAErB8K,EADU,MAAV9K,EACM8K,EAAIG,OAAiBJ,EAAQ7K,GAd1BqC,KAAI,SAAAnC,GACb,OAAO,IAAIH,EAAKG,EAAKF,MAAME,EAAKD,KAAKC,EAAKA,KAAKA,EAAKC,OAAQD,EAAKE,cAe3D0K,EAAIG,OAXD,SAACrJ,EAAO5B,GACrB,OAAO4B,EAAMS,KAAI,SAAAnC,GACb,OAAO,IAAIH,EAAKG,EAAKF,MAAME,EAAKD,MAAMC,EAAKA,KAAKwH,EAAO1H,IAAQoL,QAAQ,GAAGlL,EAAKC,OAAQD,EAAKE,aAS3EkL,CAAST,EAAQ7K,GAAOA,OAIjD8K,EAAInI,MAAK,SAAC9B,EAAE+B,GACR,OAAO/B,EAAEX,KAAK0C,EAAE1C,QAGb4K,GAKES,EAAa,SAACvH,GAAU,IAAD,EACRiD,qBADQ,mBACzB7F,EADyB,KACnBoK,EADmB,KAE1BC,EAAO,uCAAG,WAAOC,GAAP,SAAA7K,EAAA,sEACC6K,EADD,mFAAH,sDAiBb,OAZAC,qBAAU,WAAM,4CACZ,gCAAA9K,EAAA,sEACwB4K,EAAQ9K,EAAU,+EAAgF,IAAIiL,MAAOC,YADrI,OACQhB,EADR,OAEQC,EAAMF,EAAOC,GACbiB,EAAMT,EAAOR,GACjBA,EAAO,IAAUC,EACjBD,EAAO,IAAUiB,EACjBN,EAAQX,GANZ,4CADY,uBAAC,WAAD,wBASZkB,KACF,IAGE,kBAAC,EAAD,CAAe/I,aAAc,CAACgD,SAAS,MAAO9C,QAASA,GAClD9B,GAAQ,kBAAC,EAAD,MACT,yBAAK4K,MAAM,aACN5K,GAAQ,kBAAC2C,EAAD,CAAYiI,MAAM,MAAM5K,KAAMA,EAAI,IAASnB,KAAM,QACzDmB,GAAQ,kBAAC2C,EAAD,CAAYiI,MAAM,MAAM5K,KAAMA,EAAI,IAASnB,KAAM,QACzDmB,GAAQ2J,OAAOC,KAAK5J,GAAMiB,KAAI,SAAA4C,GAC3B,MAAkB,QAAdA,GAAqC,QAAdA,EAChB,KAGP,kBAAClB,EAAD,CAAYiI,MAAM,MAAM5K,KAAMA,EAAK6D,GAAYhF,KAAMgF,UCzFzDgH,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.291c7cc1.chunk.js","sourcesContent":["export class Time{\n    parseTime(time){\n        time = parseFloat(time,10);\n        if (isNaN(time)){\n            return 999;\n        } else {\n            return time;\n        }\n    }\n    constructor(clazz, name, time, number, rawTimes){\n        this.clazz = clazz;\n        this.name = name;\n        this.time = this.parseTime(time);\n        this.number = number;\n        this.rawTimes = rawTimes;\n    }\n}","import {Time} from './time';\nconst axios = require('axios');\n\n\nexport const getTiming = async (url) => {\n    let res = await axios.get(url);\n\n    let parser = new DOMParser();\n    let doc = parser.parseFromString(res.data.contents, \"text/html\");\n    let data = {};\n    let currentClass = \"\";\n    doc.querySelectorAll(\"body > a > table:nth-child(4) > tbody > tr\").forEach(tr=> {\n        if (tr.querySelector(\"th\")){\n            currentClass = tr.querySelector(\"a\").name;\n            data[currentClass] = []\n        } else {\n            let clazz = tr.querySelector(\"td:nth-child(2)\").innerText;\n            let number = tr.querySelector(\"td:nth-child(3)\").innerText;\n            let name = tr.querySelector(\"td:nth-child(4)\").innerText;\n            let times = Array.prototype.slice.call(tr.querySelectorAll(\"td:nth-child(n+7)\"));\n            times = times.slice(0,times.length-2);\n\n            let actualTimes = [];\n            let rawTimes = [];\n            times.forEach(timeHtml => {\n                let time = timeHtml.innerText.split(\"+\").map(s=>s.trim());\n                rawTimes.push(timeHtml.innerText.trim());\n                if (time.length === 1){\n                    if (time[0] === \"\"){\n                        return;\n                    }\n                    actualTimes.push(parseFloat(time,10));\n                } else if (time.length === 2) {\n                    if (time[1] === \"dnf\" || time[1] === \"dns\" ){\n                        actualTimes.push(999);\n                        return;\n                    }\n                    let cones = parseFloat(time[1],10);\n                    actualTimes.push(parseFloat(time,10) + cones * 2);\n                    return;\n                }\n            });\n            let bestTime = actualTimes.sort((a,b)=>a-b)[0];\n            data[currentClass].push(new Time(clazz,name,bestTime, number, rawTimes));\n        }\n    });\n\n    \n    return data;\n}","import React, {createContext, useContext, useReducer} from 'react';\nexport const StateContext = createContext();\n\n\nexport const StateProvider = ({initialState, children, reducer}) =>(\n  <StateContext.Provider value={useReducer(reducer, initialState)}>\n    {children}\n  </StateContext.Provider>\n);\nexport const useStateValue = () => useContext(StateContext);\n\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { useStateValue } from './context/context';\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 500,\n    maxWidth: 500,\n    width: 500\n    \n  },\n  height: \"35px\"\n});\n\nfunction createData(name, number, time, clazz, rawTimes) {\n  return { name, number, time, clazz, rawTimes };\n}\n\nexport function AutoXTable(props) {\n    const {data, name} = props\n    const [, dispatch] = useStateValue();\n    const rows = data.map(row => {\n        return createData(row.name, row.number, row.time, row.clazz, row.rawTimes)\n    })\n\n    const classes = useStyles();\n    let position = 0;\n\n    return (\n        <React.Fragment>    \n            <TableContainer component={Paper}>\n                <div style={{ overflow: 'auto', height: '350px', borderStyle: \"solid\" }}>\n                    <h2 style={{ marginLeft: \"15px\" }}>{name.toUpperCase()}</h2>\n                    <Table className={classes.table} aria-label=\"simple table\" style={{tableLayout: 'fixed'}}>\n                        <TableHead>\n                            <TableRow>\n                                <TableCell style={{ width: 25 }} align=\"left\">Position</TableCell>\n                                <TableCell align=\"left\">Number</TableCell>\n                                <TableCell>Name</TableCell>\n                                <TableCell align=\"right\">Time</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {rows.map((row) => {\n                                position++;\n                                return (\n                                <TableRow key={row.name}>\n                                    <TableCell align=\"left\">{position}</TableCell>\n                                    <TableCell align=\"left\">{row.number + \" \" + row.clazz.toUpperCase()}</TableCell>\n                                    <TableCell onClick={()=>dispatch({type: \"SELECTED_DRIVER\", data: row})} component=\"th\" scope=\"row\">\n                                        <div style={{color:\"blue\", cursor: \"pointer\"}}>{row.name}</div>\n                                    </TableCell>\n                                    <TableCell align=\"right\">{row.time}</TableCell>\n                                </TableRow>\n                            )})}\n                        </TableBody>\n                    </Table>\n                </div>\n            </TableContainer>\n        </React.Fragment>\n    );\n}\n","import React from 'react';\nimport { useStateValue } from './context/context'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 500,\n    maxWidth: 500,\n    width: 500\n  },\n\n});\n\n\nexport function DriverTable(props) {\n    const classes = useStyles();\n    const [{selected}, ] = useStateValue()\n    const {clazz, name, rawTimes} = selected;\n    let position = 0;\n\n    return (\n        <React.Fragment>    \n            <TableContainer component={Paper}>\n                <div style={{ overflow: 'auto'}}>\n                    <h2 style={{ marginLeft: \"15px\" }}>{name} ({clazz.toUpperCase()})</h2>\n                    <Table className={classes.table} aria-label=\"simple table\" style={{tableLayout: 'fixed'}}>\n                        <TableHead>\n                            <TableRow>\n                                <TableCell align=\"left\">Run</TableCell>\n                                <TableCell align=\"left\">Time</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {rawTimes.map((row) => {\n                                position++;\n                                return (\n                                <TableRow>\n                                    <TableCell align=\"left\">{position}</TableCell>\n                                    <TableCell align=\"left\">{row}</TableCell>\n                                </TableRow>\n                            )})}\n                        </TableBody>\n                    </Table>\n                </div>\n            </TableContainer>\n        </React.Fragment>\n    );\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Modal from '@material-ui/core/Modal';\nimport {DriverTable} from './DriverTable';\nimport { useStateValue } from './context/context';\nfunction getModalStyle() {\n  const top = 50;\n  const left = 50;\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\n\nconst useStyles = makeStyles(theme => ({\n  paper: {\n    position: 'absolute',\n    width: 400,\n    backgroundColor: theme.palette.background.paper,\n    border: '2px solid #000',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n\nexport const DriverModal = () => {\n    const [{selected}, dispatch] = useStateValue()\n    const classes = useStyles();\n    const [modalStyle] = React.useState(getModalStyle);\n\n    if (!selected){\n        return <div/>;\n    }\n    \n    return (\n    <div>\n        <Modal\n        aria-labelledby=\"simple-modal-title\"\n        aria-describedby=\"simple-modal-description\"\n        open={ selected ? true : false }\n        onClose={()=>dispatch({ type: 'DESELECT_DRIVER'})}>\n            <div style={modalStyle} className={classes.paper}>\n                <DriverTable />\n            </div>\n        </Modal>\n    </div>\n    );\n    }","export const reducer = (state, action) => {\n  switch (action.type) {\n    case 'SELECTED_DRIVER':\n        return {selected: action.data };\n    case 'DESELECT_DRIVER':\n        return {selected: null };\n    default:\n        return state;\n  }\n};","import React, {useState, useEffect}  from 'react';\nimport {getTiming} from './service/service';\nimport {AutoXTable} from './table';\nimport './App.css';\nimport { Time } from './service/time';\nimport { DriverModal } from './Modal';\nimport { StateProvider } from './context/context'\nimport { reducer } from './context/reducer'\n\nconst paxMap = {ss:.822,as:.819,bs:.814,cs:.809,ds:.806,es:.794,fs:.803,gs:.792,hs:.78,hcs:.792,ssr:.843,\"xs-a\":.844,\"xs-b\":.864,ev:.824,ssp:.853,asp:.849,bsp:.852,csp:.865,dsp:.842,esp:.839,fsf:.823,sts:.812,stx:.816,str:.827,stu:.828,sth:.813,ssc:.801,smf:.841,sm:.854,ssm:.875,xp:.88,bp:.867,cp:.851,dp:.866,ep:.85,fp:.868,hcr:.815,am:1,bm:.962,cm:.893,dm:.895,em:.896,fm:.911,fsae:.963,km:.93,ja:.855,jb:.82,jc:.718,camc:.818,camt:.817,cams:.833,}\n\nconst getRaw = (results) => {\n    const fixNovice = (times) => {\n        return times.map(time=>{\n            let runTime = time.time\n            if (runTime!== 999){\n                let clazz = time.clazz.substring(1);\n                runTime = (time.time / paxMap[clazz]).toFixed(3);\n            }\n            \n            return new Time(time.clazz,time.name,runTime,time.number,time.rawTimes);\n        })\n    }\n\n    let raw = [];\n    Object.keys(results).forEach(clazz => {\n        if (clazz === 'n'){\n            raw = raw.concat(fixNovice(results[clazz]));\n        } else {\n            raw = raw.concat(results[clazz]);\n        }\n        \n    })\n    raw.sort((a,b)=> {\n        return a.time-b.time;\n    })\n    \n    return raw\n}\n\nconst getPax = (results) => {\n    const fixNovice = (times) => {\n        return times.map(time=>{\n            return new Time(time.clazz,time.name,time.time,time.number, time.rawTimes);\n        })\n    }\n\n    const applyPax = (times, clazz) => {\n        return times.map(time=>{\n            return new Time(time.clazz,time.name,(time.time*paxMap[clazz]).toFixed(3),time.number, time.rawTimes);\n        })\n    }\n\n    let raw = [];\n    Object.keys(results).forEach(clazz => {\n        if (clazz === 'n'){\n            raw = raw.concat(fixNovice(results[clazz]));\n        } else {\n            raw = raw.concat(applyPax(results[clazz],clazz));\n        }\n        \n    })\n    raw.sort((a,b)=> {\n        return a.time-b.time;\n    })\n    \n    return raw\n}\n\n\n\nexport const LiveTiming = (props) =>{\n    const [data, setData] = useState();\n    const getData = async (promise) => {\n        return await promise;\n        \n    }\n\n    useEffect(() => {\n        async function fetchData() {\n            let results = await getData(getTiming(\"https://api.allorigins.win/get?url=stcsolo.com/live/results_live.htm?cache=\" + new Date().getTime()));\n            let raw = getRaw(results)\n            let pax = getPax(results)\n            results['RAW'] = raw;\n            results['PAX'] = pax;\n            setData(results);\n        }\n        fetchData();\n    },[]);\n\n    return (\n        <StateProvider initialState={{selected:null}} reducer={reducer} >\n            {data && <DriverModal />}\n            <div class=\"flex-grid\">\n                {data && <AutoXTable class=\"col\" data={data[\"PAX\"]} name={\"PAX\"} />}\n                {data && <AutoXTable class=\"col\" data={data[\"RAW\"]} name={\"RAW\"} />}\n                {data && Object.keys(data).map(className => {\n                    if (className === \"RAW\" || className === \"PAX\") {\n                        return null\n                    };\n                    return (\n                        <AutoXTable class=\"col\" data={data[className]} name={className} />\n                    )\n                })}\n            </div>\n        </StateProvider>\n    )\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {LiveTiming} from './LiveTiming';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <LiveTiming />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}