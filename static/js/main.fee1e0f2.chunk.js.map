{"version":3,"sources":["service/time.js","service/service.js","context/context.js","table.js","DriverTable.js","Modal.js","dropdown.js","dotyTable.js","classDotyTable.js","LiveTiming.js","serviceWorker.js","index.js","context/reducer.js"],"names":["Time","clazz","name","time","number","rawTimes","car","fastestIndex","this","parseTime","parseFloat","isNaN","axios","require","getClassResults","url","a","get","res","parser","DOMParser","doc","parseFromString","data","contents","currentClass","querySelectorAll","forEach","tr","querySelector","trs","Array","prototype","slice","call","innerText","points","map","point","lowTime","filter","sort","b","length","totalTimes","getDOTY","dispatch","startSkipping","getTiming","maxNumberOfRuns","conesHit","numberOfRun","times","actualTimes","fastest","timeHtml","index","split","s","trim","push","raw","cones","bestTime","type","runCount","maxRuns","StateContext","createContext","StateProvider","initialState","children","reducer","Provider","value","useReducer","useStateValue","useContext","useStyles","makeStyles","table","minWidth","height","AutoXTable","props","rows","row","createData","topPaxtime","classes","position","Fragment","TableContainer","component","Paper","Table","className","aria-label","TableHead","TableRow","style","background","TableCell","width","color","align","fill","em","TableBody","onClick","scope","cursor","toUpperCase","toFixed","backgroundColor","maxWidth","DriverTable","selected","overflow","marginLeft","tableLayout","getModalStyle","top","left","transform","theme","paper","palette","border","boxShadow","shadows","padding","spacing","DriverModal","React","useState","modalStyle","Modal","aria-labelledby","aria-describedby","open","onClose","formControl","margin","selectEmpty","marginTop","Dropdown","clazzes","dropdown","FormControl","InputLabel","Select","onChange","window","history","pushState","location","pathname","target","cl","MenuItem","DotyTable","sum","lowest","currentEventScore","currentTime","href","driver","above","topPax","paxMap","diff","pointsNeeded","getNeedsToMoveUp","ClassDotyTable","currentClassData","fastestTime","Object","keys","reduce","accumulator","currentValue","console","log","ss","fsp","as","bs","cs","ds","es","fs","gs","hs","hcs","ssr","ev","ssp","asp","bsp","csp","dsp","esp","fsf","sts","stx","str","stu","sth","ssc","smf","sm","ssm","xp","bp","cp","dp","ep","fp","hcr","am","bm","cm","dm","fm","fsae","km","ja","jb","jc","camc","camt","cams","getRaw","results","concat","runTime","substring","noviceTimes","getPax","applyPax","LiveTiming","setData","setClasses","setTopPax","dotyData","setDoty","showDoty","setShowDoty","showClassDoty","setShowClassDoty","classDoty","setClassDoty","getData","promise","checkurl","search","includes","val","replace","calculateDOTY","dotyRes","pax","currentPointsForEvent","pop","po","arr","useEffect","Date","getTime","dotyResults","classResults","classList","fetchData","onpopstate","e","float","paddingRight","paddingTop","class","Boolean","hostname","match","ReactDOM","render","StrictMode","state","action","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fee1e0f2.chunk.js","sourcesContent":["export class Time{\n    parseTime(time){\n        time = parseFloat(time,10);\n        if (isNaN(time)){\n            return 999;\n        } else {\n            return time;\n        }\n    }\n    constructor(clazz, name, time, number, rawTimes, car, fastestIndex){\n        this.clazz = clazz;\n        this.name = name;\n        this.time = this.parseTime(time);\n        this.number = number;\n        this.rawTimes = rawTimes;\n        this.car = car;\n        this.fastestIndex = fastestIndex;\n    }\n}","import {Time} from './time';\n\nconst axios = require('axios');\n\nexport const getClassResults = async(url) => {\n    let res = await axios.get(url);\n    let parser = new DOMParser();\n    let doc = parser.parseFromString(res.data.contents, \"text/html\");\n    let data = {}\n    let currentClass = null;\n    doc.querySelectorAll(\"table:nth-child(9) > tbody > tr\").forEach(tr=>{\n        if (tr.querySelector(\"th\")){\n            currentClass = tr.querySelector(\"th > a\").name;\n            return;\n        }\n        \n        let trs = tr.querySelectorAll('td');\n        trs = Array.prototype.slice.call(trs);\n        let name = trs[1].innerText;\n\n        trs = trs.slice(4);\n        \n        let points = trs.map(point=> parseFloat(point.innerText));\n        points = points.filter(a=>!isNaN(a)).sort((a,b)=> b-a).slice(0,6);\n\n\n        let lowTime = 0;\n        if (points.length > 5){\n            lowTime = points[5];\n        }\n        if (!data[currentClass]){\n            data[currentClass] = {}\n        }\n        data[currentClass][name] = {name:name, lowTime: lowTime, totalTimes: points.length, points:points}\n\n    })\n\n    return data; \n}\n\nexport const getDOTY = async (url, dispatch) => {\n    let res = await axios.get(url);\n    let parser = new DOMParser();\n    let doc = parser.parseFromString(res.data.contents, \"text/html\");\n    let data = {}\n    let startSkipping = false;\n    doc.querySelectorAll(\"body > table:nth-child(6) > tbody > tr\").forEach(tr=>{\n        if (startSkipping){return}\n        let trs = tr.querySelectorAll('td');\n        trs = Array.prototype.slice.call(trs);\n        let name = trs[1].innerText;\n        trs = trs.slice(4);\n        \n        let points = trs.map(point=> parseFloat(point.innerText));\n        points = points.filter(a=>!isNaN(a));\n        startSkipping = points.length < 5 ? true : false;\n\n        if (startSkipping){return}\n\n        points = points.sort((a,b)=> b-a);\n        points = points.slice(0,6)\n\n        let lowTime = 0;\n        if (points.length > 5){\n            lowTime = points[5];\n        }\n        data[name] = {name:name, lowTime: lowTime, totalTimes: points.length, points:points};\n\n    })\n\n    return data;\n};\n\nexport const getTiming = async (url, dispatch) => {\n    let res = await axios.get(url);\n\n    let parser = new DOMParser();\n    let doc = parser.parseFromString(res.data.contents, \"text/html\");\n    let data = {};\n    let currentClass = \"\";\n    let maxNumberOfRuns = 0;\n    let conesHit = 0;\n    let numberOfRun = 0;\n    doc.querySelectorAll(\"body > a > table:nth-child(4) > tbody > tr\").forEach(tr=> {\n        if (tr.querySelector(\"th\")){\n            currentClass = tr.querySelector(\"a\").name;\n            data[currentClass] = []\n        } else {\n            let clazz = tr.querySelector(\"td:nth-child(2)\").innerText;\n            let number = tr.querySelector(\"td:nth-child(3)\").innerText;\n            let name = tr.querySelector(\"td:nth-child(4)\").innerText;\n            let car = tr.querySelector(\"td:nth-child(5)\").innerText;\n            let times = Array.prototype.slice.call(tr.querySelectorAll(\"td:nth-child(n+7)\"));\n\n            times = times.slice(0,times.length-2);\n\n            let actualTimes = [];\n            let rawTimes = [];\n            let fastest = 999;\n            let fastestIndex = -1;\n            times.forEach((timeHtml,index) => {\n                let time = timeHtml.innerText.split(\"+\").map(s=>s.trim());\n                rawTimes.push(timeHtml.innerText.trim());\n                if (time.length === 1){\n                    if (time[0] === \"\"){\n                        return;\n                    }\n                    let raw = parseFloat(time,10);\n                    actualTimes.push(raw);\n                    numberOfRun++;\n                    if (raw < fastest){\n                        fastest = raw;\n                        fastestIndex = index;\n                    }\n                } else if (time.length === 2) {\n                    if (time[1] === \"dnf\" || time[1] === \"dns\" ){\n                        actualTimes.push(999);\n                        return;\n                    }\n                    let cones = parseFloat(time[1],10);\n                    if (isNaN(cones)) cones = 0;\n                    let raw = parseFloat(time,10) + cones * 2;\n                    conesHit+= cones;\n                    numberOfRun++;\n                    actualTimes.push(raw);\n                    if (raw < fastest){\n                        fastest = raw;\n                        fastestIndex = index;\n                    }\n                }\n            });\n            let bestTime = actualTimes.sort((a,b)=>a-b)[0];\n            data[currentClass].push(new Time(clazz,name,bestTime, number, rawTimes, car, fastestIndex));\n            if (rawTimes.length > maxNumberOfRuns){\n                maxNumberOfRuns = rawTimes.length;\n            }\n        }\n    });\n\n    dispatch({type:\"RUNS_AND_CONES\", data:{conesHit:conesHit, runCount: numberOfRun, maxRuns: maxNumberOfRuns}})\n\n    \n    return data;\n}","import React, {createContext, useContext, useReducer} from 'react';\nexport const StateContext = createContext();\n\n\nexport const StateProvider = ({initialState, children, reducer}) =>(\n  <StateContext.Provider value={useReducer(reducer, initialState)}>\n    {children}\n  </StateContext.Provider>\n);\nexport const useStateValue = () => useContext(StateContext);\n\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { useStateValue } from './context/context';\n\nconst useStyles = makeStyles({\n    table: {\n      minWidth: 500, \n    },\n    height: \"35px\"\n  });\n\nfunction createData(name, number, time, clazz, rawTimes, car, fastestIndex) {\n  return { name, number, time, clazz, rawTimes, car, fastestIndex};\n}\n\nexport function AutoXTable(props) {\n\n    let { data, name } = props\n    const [{maxRuns}, dispatch] = useStateValue();\n\n    let rows = data.map(row => {\n        return createData(row.name, row.number, row.time, row.clazz, row.rawTimes, row.car, row.fastestIndex)\n    })\n\n    let topPaxtime = null;\n\n    if (rows && rows.length > 1 && name === 'PAX'){\n        topPaxtime = rows[0].time;\n    } else if (rows && name !== \"RAW\"){\n        topPaxtime = rows[0].time;\n    }\n    const classes = useStyles();\n    let position = 0;\n    return (\n        <React.Fragment>    \n            <TableContainer component={Paper}>\n                <div>\n                    <Table className={classes.table} aria-label=\"simple table\" >\n                        <TableHead>\n                            <TableRow style={{ background : \"gray\"}}>\n                                <TableCell style={{ width: 25, color:\"white\" }} align=\"left\">Position</TableCell>\n                                <TableCell style={{ color : \"white\"}} >Name</TableCell>\n                                <TableCell style={{ color : \"white\"}} align=\"left\">Number</TableCell>\n                                <TableCell style={{ color : \"white\"}} align=\"left\">Best</TableCell>\n                                <TableCell style={{ color : \"white\"}} align=\"left\">Diff</TableCell>\n                                \n                                { (new Array(maxRuns)).fill().map( (em, index) => {\n                                    return <TableCell style={{ color : \"white\"}} align=\"left\">{index+1}</TableCell>\n                                })}\n                                {topPaxtime && <TableCell style={{ color : \"white\"}} align=\"left\">DOTY Points</TableCell>}\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {rows.map((row,index) => {\n                                position++;\n                                return (\n                                <TableRow style ={ index % 2 ? { background : \"#f2f2f2\" }: {}    }>\n                                    <TableCell align=\"left\">{position}</TableCell>\n                                    <TableCell onClick={()=>dispatch({type: \"SELECTED_DRIVER\", data: row})} component=\"th\" scope=\"row\">\n                                        <div style={{color:\"blue\", cursor: \"pointer\"}}>{row.name}</div>\n                                    </TableCell>\n                                    <TableCell align=\"left\">{row.number + \" \" + row.clazz.toUpperCase()}</TableCell>\n                                    <TableCell align=\"left\">{row.time}</TableCell>\n                                    <TableCell>{row && row.fastestIndex && row.rawTimes && \n                                        index === 0 || !rows[index-1] ? 0 : (rows[index-1].time - row.time).toFixed(3)\n                                    }\n                                     </TableCell>\n                                   \n\n                                   \n                                    { (new Array(maxRuns)).fill().map( (em, index) => {\n                                        if (row.fastestIndex === index){\n                                            return <TableCell align=\"left\" style={{backgroundColor:\"lightgreen\"}}>{row.rawTimes.length > index ? row.rawTimes[index] : \"\"}</TableCell>\n                                        } else {\n                                            return <TableCell align=\"left\">{row.rawTimes.length > index ? row.rawTimes[index] : \"\"}</TableCell>\n                                        }\n\n                                    })}\n                                    {topPaxtime && <TableCell>{(topPaxtime/row.time*1000).toFixed(3)}</TableCell>}\n                                </TableRow>\n                            )})}\n                        </TableBody>\n                    </Table>\n                </div>\n            </TableContainer>\n        </React.Fragment>\n    );\n}\n","import React from 'react';\nimport { useStateValue } from './context/context'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 500,\n    maxWidth: 500,\n    width: 500\n  },\n\n});\n\n\nexport function DriverTable(props) {\n    const classes = useStyles();\n    const [{selected}, ] = useStateValue()\n    const {clazz, name, rawTimes, car, fastestIndex} = selected;\n    let position = 0;\n\n    return (\n        <React.Fragment>    \n            <TableContainer component={Paper}>\n                <div style={{ overflow: 'auto'}}>\n                    <h2 style={{ marginLeft: \"15px\" }}>{name} ({clazz.toUpperCase()})</h2>\n                    <h4 style={{ marginLeft: \"15px\" }}>{car}</h4>\n                    <Table className={classes.table} aria-label=\"simple table\" style={{tableLayout: 'fixed'}}>\n                        <TableHead>\n                            <TableRow>\n                                <TableCell align=\"left\">Run</TableCell>\n                                <TableCell align=\"left\">Time</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {rawTimes.map((row, index) => {\n                                position++;\n                                return (\n                                <TableRow>\n                                    <TableCell align=\"left\">{position}</TableCell>\n                                    {fastestIndex+1 === position ?\n                                        <TableCell align=\"left\" style={{backgroundColor:\"lightgreen\"}}>{row}</TableCell>\n                                        :\n                                        <TableCell align=\"left\">{row}</TableCell>\n                                    }\n                                </TableRow>\n                            )})}\n                        </TableBody>\n                    </Table>\n                </div>\n            </TableContainer>\n        </React.Fragment>\n    );\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Modal from '@material-ui/core/Modal';\nimport {DriverTable} from './DriverTable';\nimport { useStateValue } from './context/context';\nfunction getModalStyle() {\n  const top = 50;\n  const left = 50;\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\n\nconst useStyles = makeStyles(theme => ({\n  paper: {\n    position: 'absolute',\n    width: 400,\n    backgroundColor: theme.palette.background.paper,\n    border: '2px solid #000',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n\nexport const DriverModal = () => {\n    const [{selected}, dispatch] = useStateValue()\n    const classes = useStyles();\n    const [modalStyle] = React.useState(getModalStyle);\n\n    if (!selected){\n        return <div/>;\n    }\n    \n    return (\n    <div>\n        <Modal\n        aria-labelledby=\"simple-modal-title\"\n        aria-describedby=\"simple-modal-description\"\n        open={ selected ? true : false }\n        onClose={()=>dispatch({ type: 'DESELECT_DRIVER'})}>\n            <div style={modalStyle} className={classes.paper}>\n                <DriverTable />\n            </div>\n        </Modal>\n    </div>\n    );\n    }","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport { useStateValue } from './context/context'\n\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n}));\n\nexport const Dropdown = ({clazzes}) => {\n  const classes = useStyles();\n  const [{dropdown}, dispatch] = useStateValue();\n\n\n\n  return (\n      <FormControl className={classes.formControl}>\n        <InputLabel>Class</InputLabel>\n        <Select value={dropdown} onChange={(data)=>{\n            window.history.pushState(\"\", \"\", `${window.location.pathname}?class=${data.target.value}` );\n            dispatch({type:\"UPDATE_DROPDOWN\", data:data.target.value\n          })}}>\n            {clazzes.map(cl => {\n                return <MenuItem value={cl}>{cl.toUpperCase()}</MenuItem>\n            })}\n        </Select>\n      </FormControl>\n  );\n};","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { useStateValue } from './context/context';\n\nconst useStyles = makeStyles({\n    table: {\n      minWidth: 500, \n    },\n    height: \"35px\"\n  });\n\nfunction createData(name, sum, lowest, currentEventScore,currentTime, clazz) {\n  return { name, sum, lowest, currentEventScore,currentTime, clazz};\n}\n\nfunction getNeedsToMoveUp(driver, above, topPax, paxMap){\n    if (!above){\n        return \"Lonely at the top Caleb\"\n    }\n    let diff = above.sum - driver.sum;\n\n    if (1000 < diff + driver.currentEventScore  ){\n        return \"Can't move up\"\n    } else if (!driver.currentEventScore){\n        return \"Can't move up if not running\"\n    } else {\n        if (driver.lowest !== driver.currentEventScore){\n            diff += driver.lowest - driver.currentEventScore \n        }\n        let pointsNeeded = ((parseFloat(driver.currentEventScore) + parseFloat(diff)))/1000 ;\n        return (topPax/paxMap[driver.clazz] / pointsNeeded).toFixed(3)        \n    }\n}\n\nexport function DotyTable(props) {\n    let { data, onClose} = props\n\n\n    let rows = data.map(row => {\n        return createData(row.name, row.sum, row.lowest, row.currentEventScore,row.currentTime, row.clazz)\n    })\n\n    const classes = useStyles();\n    let position = 0;\n\n    return (\n        <React.Fragment>    \n            <a href=\"#\" onClick={onClose} >Back</a>\n            <TableContainer component={Paper}>\n                <div>\n                    <Table className={classes.table} aria-label=\"simple table\" >\n                        <TableHead>\n                            <TableRow style={{ background : \"gray\"}}>\n                                <TableCell style={{ width: 25, color:\"white\" }} align=\"left\">Position</TableCell>\n                                <TableCell style={{ color : \"white\"}} >Name</TableCell>\n                                <TableCell style={{ color : \"white\"}} align=\"left\">Score</TableCell>\n                                <TableCell style={{ color : \"white\"}} align=\"left\">Lowest scored Event</TableCell>\n                                <TableCell style={{ color : \"white\"}} align=\"left\">Raw time need to move up</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {rows.map((row,index) => {\n                                if (index === 0){\n                                    return (\n                                        <TableRow style ={ index % 2 ? { background : \"#f2f2f2\" }: {}    }>\n                                            <TableCell align=\"left\">DSQ</TableCell>\n                                            <TableCell  component=\"th\" scope=\"row\">\n                                                <div>{row.name}</div>\n                                            </TableCell>\n                                            <TableCell align=\"left\">{row.sum.toFixed(2)}</TableCell>\n                                            <TableCell align=\"left\">Disqualified for an illegal tune in HS</TableCell>\n                                            <TableCell align=\"left\"></TableCell>\n                                        </TableRow>\n                                    )\n                                }\n                                position++;\n                                return (\n                                <TableRow style ={ index % 2 ? { background : \"#f2f2f2\" }: {}    }>\n                                    <TableCell align=\"left\">{position}</TableCell>\n                                    <TableCell  component=\"th\" scope=\"row\">\n                                        <div>{row.name}</div>\n                                    </TableCell>\n                                    <TableCell align=\"left\">{row.sum.toFixed(2)}</TableCell>\n                                    <TableCell align=\"left\">{row.lowest}</TableCell>\n                                    <TableCell align=\"left\">{getNeedsToMoveUp(row, rows[index-1], props.topPax, props.paxMap)}</TableCell>\n                                   \n                                </TableRow>\n                            )})}\n                        </TableBody>\n                    </Table>\n                </div>\n            </TableContainer>\n        </React.Fragment>\n    );\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nconst useStyles = makeStyles({\n    table: {\n      minWidth: 500, \n    },\n    height: \"35px\"\n  });\n\n\nexport function ClassDotyTable(props) {\n    let { data, onClose, currentClassData} = props\n    let fastestTime = currentClassData[0].time;\n    currentClassData.map(time => {\n        if (data[time]){\n            data[time.name].points.push( time.time / fastestTime * 1000 );\n            data[time.name].points = data[time.name].points.sort((a,b)=> b-a).slice(0,6)\n        }\n    })\n\n    let res = Object.keys(data).map(name => {\n        data[name].sum = data[name].points.reduce((accumulator, currentValue) => accumulator + currentValue);\n        console.log(name, data[name].sum)\n        return data[name]\n    }).sort((a,b)=>{\n        return b.time - a.time;\n    })\n\n    const classes = useStyles();\n    let position = 0;\n\n    return (\n        <React.Fragment>    \n            <a href=\"#\" onClick={onClose} >Back</a>\n            <TableContainer component={Paper}>\n                <div>\n                    <Table className={classes.table} aria-label=\"simple table\" >\n                        <TableHead>\n                            <TableRow style={{ background : \"gray\"}}>\n                                <TableCell style={{ width: 25, color:\"white\" }} align=\"left\">Position</TableCell>\n                                <TableCell style={{ color : \"white\"}} >Name</TableCell>\n                                <TableCell style={{ color : \"white\"}} align=\"left\">Score</TableCell>\n                                <TableCell style={{ color : \"white\"}} align=\"left\">Lowest scored Event</TableCell>\n                                <TableCell style={{ color : \"white\"}} align=\"left\">Scored Events</TableCell>\n                                <TableCell style={{ color : \"white\"}} align=\"left\">Diff</TableCell>\n\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {res.map((row,index) => {\n                                position++;\n                                return (\n                                <TableRow style ={ index % 2 ? { background : \"#f2f2f2\" }: {}    }>\n                                    <TableCell align=\"left\">{position}</TableCell>\n                                    <TableCell  component=\"th\" scope=\"row\">\n                                        <div>{row.name}</div>\n                                    </TableCell>\n                                    <TableCell align=\"left\">{row.sum.toFixed(2)}</TableCell>\n                                    <TableCell align=\"left\">{row.points[row.points.length-1]}</TableCell>\n                                    <TableCell align=\"left\">{row.points.length}</TableCell>\n                                    {index === 0 && \n                                        <TableCell align=\"left\">0</TableCell>\n                                    }\n                                    {index !== 0 && \n                                        <TableCell align=\"left\">{ (res[index-1].sum - row.sum).toFixed(2) }</TableCell>\n                                    }\n                                    \n                                </TableRow>\n                            )})}\n                        </TableBody>\n                    </Table>\n                </div>\n            </TableContainer>\n        </React.Fragment>\n    );\n}\n","import React, {useState, useEffect}  from 'react';\nimport {getTiming, getDOTY, getClassResults} from './service/service';\nimport {AutoXTable} from './table';\nimport './App.css';\nimport { Time } from './service/time';\nimport { DriverModal } from './Modal';\nimport { Dropdown } from './dropdown';\nimport { DotyTable } from './dotyTable';\nimport { ClassDotyTable } from './classDotyTable'\nimport { useStateValue } from './context/context'\n\nconst paxMap = {ss:.822,fsp:.823,as:.819,bs:.814,cs:.809,ds:.806,es:.794,fs:.803,gs:.792,hs:.78,hcs:.792,ssr:.843,\"xs-a\":.844,\"xs-b\":.864,ev:.824,ssp:.853,asp:.849,bsp:.852,csp:.865,dsp:.842,esp:.839,fsf:.823,sts:.812,stx:.816,str:.827,stu:.828,sth:.813,ssc:.801,smf:.841,sm:.854,ssm:.875,xp:.88,bp:.867,cp:.851,dp:.866,ep:.85,fp:.868,hcr:.815,am:1,bm:.962,cm:.893,dm:.895,em:.896,fm:.911,fsae:.963,km:.93,ja:.855,jb:.82,jc:.718,camc:.818,camt:.817,cams:.833,}\n\nconst getRaw = (results) => {\n    const fixNovice = (times) => {\n        return times.map(time=>{\n            let runTime = time.time\n            let clazz = time.clazz.substring(1);\n            if (runTime!== 999){\n\n                runTime = (time.time / paxMap[clazz]).toFixed(3);\n            }\n            let noviceTimes = time.rawTimes.map(time=>{\n                time = time.split(\"+\")[0]\n                return (time/paxMap[clazz]).toFixed(3)\n            })\n            return new Time(time.clazz,time.name,runTime,time.number,noviceTimes, time.car, time.fastestIndex);\n        })\n    }\n\n    let raw = [];\n    Object.keys(results).forEach(clazz => {\n        if (clazz === 'n'){\n            raw = raw.concat(fixNovice(results[clazz]));\n        } else {\n            raw = raw.concat(results[clazz]);\n        }\n        \n    })\n    raw.sort((a,b)=> {\n        return a.time-b.time;\n    })\n    \n    return raw\n}\n\nconst getPax = (results) => {\n    const fixNovice = (times) => {\n        return times.map(time=>{\n            \n            return new Time(time.clazz,time.name,time.time,time.number, time.rawTimes, time.car, time.fastestIndex);\n        })\n    }\n\n    const applyPax = (times, clazz) => {\n        return times.map(time=>{\n            return new Time(time.clazz,time.name,(time.time*paxMap[clazz]).toFixed(3),time.number, time.rawTimes, time.car, time.fastestIndex);\n        })\n    }\n\n    let raw = [];\n    Object.keys(results).forEach(clazz => {\n        if (clazz === 'n'){\n            raw = raw.concat(fixNovice(results[clazz]));\n        } else {\n            raw = raw.concat(applyPax(results[clazz],clazz));\n        }\n        \n    })\n    raw.sort((a,b)=> {\n        return a.time-b.time;\n    })\n    \n    return raw\n}\n\nexport const LiveTiming = (props) =>{\n    const [data, setData] = useState();\n    const [classes, setClasses] = useState(\"\");\n    const [topPax, setTopPax] = useState(\"\");\n    const [dotyData, setDoty] = useState(null);\n    const [showDoty, setShowDoty] = useState(false)\n    const [showClassDoty, setShowClassDoty] = useState(false);\n    const [classDoty, setClassDoty] = useState(null);\n\n    const getData = async (promise) => {\n        return await promise;\n    }\n\n    const checkurl = () => {\n        if (window.location.search && window.location.search.includes(\"?class=\")){\n            let val = window.location.search.replace(\"?class=\",\"\").trim();\n            if (Object.keys(paxMap).includes(val)){\n                dispatch({type:\"UPDATE_DROPDOWN\", data:val})\n            } else if (val === \"RAW\"){\n                dispatch({type:\"UPDATE_DROPDOWN\", data:val})\n            }\n        } else {\n            dispatch({type:\"UPDATE_DROPDOWN\", data: \"PAX\"})\n        }\n    }\n\n    const calculateDOTY = (dotyRes, pax) => {\n        pax.forEach(driver=>{\n            if (dotyRes[driver['name']]){\n                let currentPointsForEvent = (pax[0].time/driver.time*1000).toFixed(2);\n                dotyRes[driver['name']].clazz = driver.clazz\n                dotyRes[driver['name']].currentEventScore = currentPointsForEvent\n                dotyRes[driver['name']].currentTime = driver.time;\n                if (dotyRes[driver['name']].lowTime < currentPointsForEvent){\n                    if (dotyRes[driver['name']].totalTimes == 6){\n                        dotyRes[driver['name']].points.pop();\n                        dotyRes[driver['name']].points.push(currentPointsForEvent);\n                    } else {\n                        dotyRes[driver['name']].points.push(currentPointsForEvent);\n                    }\n                }\n                \n            }\n        })\n        const reducer = (accumulator, currentValue) => parseFloat(accumulator) + parseFloat(currentValue);\n\n        Object.keys(dotyRes).forEach(driver=>{\n            let lowest = 1001;\n            dotyRes[driver].points.forEach(po=>{\n                if (parseFloat(po) < lowest){\n                    lowest = parseFloat(po);\n                }\n            });\n            dotyRes[driver].sum = dotyRes[driver].points.reduce(reducer);\n            dotyRes[driver].lowest = lowest;\n        });\n\n        let arr = Object.keys(dotyRes).map(driver=>dotyRes[driver])\n        arr = arr.sort((a,b)=>{\n            return  b.sum - a.sum\n        })\n        setDoty(arr);\n    }\n\n    const [{dropdown, conesHit, runCount}, dispatch] = useStateValue();\n    useEffect(() => {\n        async function fetchData() {\n            let results = await getData(getTiming(\"https://api.allorigins.win/get?url=stcsolo.com/live/results_live.htm?cache=\" + new Date().getTime(), dispatch));\n            let dotyResults = await getData(getDOTY(\"https://api.allorigins.win/get?url=stcsolo.com/wp-content/uploads/2020/09/2020_event9_paxpoints_6scores.htm?cache=\" + new Date().getTime(), dispatch));\n            let classResults = await getData(getClassResults(\"https://api.allorigins.win/get?url=stcsolo.com/wp-content/uploads/2020/10/2020membership__points.htm?cache=\" + new Date().getTime(), dispatch));\n            let raw = getRaw(results)\n            let pax = getPax(results)\n            results['RAW'] = raw;\n            results['PAX'] = pax;\n            setTopPax(results['PAX'][0].time)\n            setData(results);\n            let classList = Object.keys(results);\n            classList = [\"PAX\", \"RAW\", ...classList.slice(0,classList.length-2)]\n            setClasses(classList)\n            checkurl();\n            setClassDoty(classResults)\n            calculateDOTY(dotyResults, pax)\n        }\n  \n\n\n        fetchData();\n    },[]);\n    \n    window.onpopstate = e => checkurl();\n    \n    return (\n        <React.Fragment>\n            {data && classes && dropdown && !showDoty && !showClassDoty &&\n                <div>\n                    <DriverModal />\n                    <Dropdown clazzes={classes} />\n                    <a style={{float:\"right\", paddingRight:\"1em\", paddingTop:\"1em\"}} href=\"mailto:gosefroba22@gmail.com\">Issue or Suggestion?</a>  \n                    <br/>\n                    \n\n                    {dropdown !== 'PAX' && dropdown !== 'RAW'\n                        ?\n                            <div>\n                                <a style={{float:\"right\", paddingRight:\"1em\", paddingTop:\"1em\"}} onClick={()=>{setShowClassDoty(true)}}href=\"#\">Class DOTY</a>  \n                                <br/>\n                                <div>Time needed to match top PAX: {(topPax/paxMap[dropdown]).toFixed(3) }</div>\n                            </div>\n                        :\n                            <div>\n                                <a style={{float:\"right\", paddingRight:\"1em\", paddingTop:\"1em\"}} onClick={()=>{setShowDoty(true)}}href=\"#\">Show Live DOTY</a>  \n                                <br/>\n                                <div>Number of runs: {runCount} </div>\n                                <div>Cones hit: {conesHit}</div>\n                            </div>\n                    }\n                    <AutoXTable class=\"col\" data={data[dropdown]} name={dropdown} topPax={topPax} />\n                </div>\n            }\n\n            {data && classes && dropdown && showDoty && dotyData &&\n                <DotyTable data={dotyData} onClose={()=>{setShowDoty(false)}} topPax={topPax} paxMap={paxMap}></DotyTable>\n            }\n            { data && classes && dropdown && showClassDoty && classDoty &&\n                <ClassDotyTable data={classDoty[dropdown]} onClose={()=>{setShowClassDoty(false)}} currentClassData={data[dropdown]}></ClassDotyTable>\n            }\n\n\n        </React.Fragment>\n    )\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {LiveTiming} from './LiveTiming';\nimport * as serviceWorker from './serviceWorker';\nimport { StateProvider } from './context/context'\nimport { reducer } from './context/reducer'\n\nReactDOM.render(\n  <React.StrictMode>\n    <StateProvider initialState={{selected:null, dropdown: \"PAX\"}} reducer={reducer} >\n      <LiveTiming />\n    </StateProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const reducer = (state, action) => {\n  switch (action.type) {\n    case 'SELECTED_DRIVER':\n        return {...state, selected: action.data };\n    case 'DESELECT_DRIVER':\n        return {...state, selected: null };\n    case 'UPDATE_DROPDOWN':\n        return {...state, dropdown: action.data }\n    case 'RUNS_AND_CONES':\n        return {...state, conesHit: action.data.conesHit, runCount: action.data.runCount, maxRuns: action.data.maxRuns}\n    default:\n        return state;\n  }\n};"],"sourceRoot":""}